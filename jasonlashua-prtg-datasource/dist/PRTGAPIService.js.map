{"version":3,"sources":["../src/PRTGAPIService.js"],"names":["PRTGAPIService","alertSrv","backendSrv","PRTGAPI","api_url","username","passhash","cacheTimeoutMinutes","url","lastId","cache","Date","now","hashValue","Promise","resolve","data","getCache","str","hash","length","i","chr","charCodeAt","a","slice","unixtime","d","s","getFullYear","pad","getMonth","getDate","getHours","getMinutes","getSeconds","join","method","params","queryString","options","inCache","setCache","datasourceRequest","then","response","reject","message","groups","devices","sensors","channels","values","sensordata","messages","Version","XMLXform","console","log","error","status","statusText","performPRTGAPIRequest","groupFilter","deviceFilter","items","queryStr","invert","filterItems","match","_","trim","split","push","filter","findItem","item","group","device","sensor","name","utils","isRegex","rex","buildRegex","result","test","includes","performGroupSuggestQuery","filterQuery","hostFilter","getGroups","filters","each","filteredGroups","performDeviceSuggestQuery","sensorFilter","getHosts","hosts","host","performSensorSuggestQuery","getSensors","promises","map","objid","all","channel","sensor_raw","flatten","channelFilter","invertChannelFilter","getAllItems","target","getItems","dateFrom","dateTo","hours","avg","getPRTGDate","history","results","histdata","rCnt","iter","val","prtgDate","datetime_raw","dt","value_raw","iter2","Number","text","datetime","value","from","to","sensorId","events","time","Math","round","title","parent","type","angular","module","factory"],"mappings":"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","file":"PRTGAPIService.js","sourcesContent":["import angular from \"angular\";\r\nimport _ from \"lodash\";\r\nimport * as utils from \"./utils\";\r\nimport { XMLXform } from \"./xmlparser\";\r\n/**\r\n * PRTG API Service\r\n * Implements the high level functions that process data from PRTG\r\n */\r\n\r\n/** @ngInject */\r\nfunction PRTGAPIService(alertSrv, backendSrv) {\r\n  class PRTGAPI {\r\n    constructor(api_url, username, passhash, cacheTimeoutMinutes) {\r\n      this.url = api_url;\r\n      this.username = username;\r\n      this.passhash = passhash;\r\n      this.lastId = false;\r\n      this.cache = {};\r\n      this.cacheTimeoutMinutes = cacheTimeoutMinutes;\r\n      this.alertSrv = alertSrv;\r\n      this.backendSrv = backendSrv;\r\n    }\r\n\r\n    /**\r\n     * Tests whether a url has been stored in the cache.\r\n     * Returns boolean true | false\r\n     * \r\n     * @param url \r\n     * @return boolean\r\n     */\r\n    inCache(url) {\r\n      if (\r\n        Date.now() - this.cache[this.hashValue(url)] >\r\n        this.cacheTimeoutMinutes * 60 * 1000\r\n      ) {\r\n        return false;\r\n      }\r\n      if (this.cache[this.hashValue(url)]) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * retrieves a cached data result from the cache\r\n     *\r\n     * @param  url the URL of the request\r\n     * @return Promise\r\n     */\r\n    getCache(url) {\r\n      return Promise.resolve(this.cache[this.hashValue(url)]);\r\n    }\r\n\r\n    /**\r\n     * stores a data result in the cache\r\n     *\r\n     * @param  url the URL of the request\r\n     * @param  data the response.data object of the request\r\n     * @return promise\r\n     */\r\n    setCache(url, data) {\r\n      this.cache[this.hashValue(url)] = data;\r\n      return this.getCache(url);\r\n    }\r\n\r\n    /**\r\n     * simple clone of a java hash value\r\n     * Kevin \"Pancake\" (http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/)\r\n     *\r\n     * @param  e string to hash\r\n     * @return int32\r\n     */\r\n    hashValue(str) {\r\n      let hash = 0;\r\n      if (str.length === 0) return hash;\r\n      for (let i = 0; i < str.length; i++) {\r\n        const chr = str.charCodeAt(i);\r\n        hash = (hash << 5) - hash + chr;\r\n        hash = hash & hash; // Convert to 32bit integer\r\n      }\r\n      return hash;\r\n    }\r\n\r\n    /**\r\n     * pad date parts and optionally add one\r\n     */\r\n    pad(i, a) {\r\n      if (a) return (\"0\" + (i + 1)).slice(-2);\r\n      return (\"0\" + i).slice(-2);\r\n    }\r\n\r\n    /**\r\n     * convert a UNIX timestamp into a PRTG date string for queries\r\n     * YYYY-MM-DD-HH-MM-SS\r\n     * \r\n     * @param unixtime UNIX format timestamp\r\n     */\r\n    getPRTGDate(unixtime) {\r\n      const d = new Date(unixtime * 1000);\r\n      const s = [\r\n        d.getFullYear(),\r\n        this.pad(d.getMonth(), true),\r\n        this.pad(d.getDate()),\r\n        this.pad(d.getHours()),\r\n        this.pad(d.getMinutes()),\r\n        this.pad(d.getSeconds())\r\n      ];\r\n      return s.join(\"-\");\r\n    }\r\n\r\n    /**\r\n     * Request data from PRTG API\r\n     *\r\n     * @param  method the API method (e.g., table.json)\r\n     * @param  params HTTP query string query parameters\r\n     * @return promise\r\n     */\r\n    performPRTGAPIRequest(method, params) {\r\n      const queryString =\r\n        \"username=\" +\r\n        this.username +\r\n        \"&passhash=\" +\r\n        this.passhash +\r\n        \"&\" +\r\n        params;\r\n      const options = {\r\n        method: \"GET\",\r\n        url: this.url + \"/\" + method + \"?\" + queryString\r\n      };\r\n\r\n      if (this.inCache(options.url)) {\r\n        return this.getCache(options.url);\r\n      } else {\r\n        return this.setCache(\r\n          options.url,\r\n          this.backendSrv.datasourceRequest(options).then(\r\n            response => {\r\n              if (!response.data) {\r\n                return Promise.reject({\r\n                  message: \"Response contained no data\"\r\n                });\r\n              }\r\n\r\n              if (response.data.groups) {\r\n                return response.data.groups;\r\n              } else if (response.data.devices) {\r\n                return response.data.devices;\r\n              } else if (response.data.sensors) {\r\n                return response.data.sensors;\r\n              } else if (response.data.channels) {\r\n                return response.data.channels;\r\n              } else if (response.data.values) {\r\n                return response.data.values;\r\n              } else if (response.data.sensordata) {\r\n                return response.data.sensordata;\r\n              } else if (response.data.messages) {\r\n                return response.data.messages;\r\n              } else if (response.data.Version) {\r\n                return response.data;\r\n              } else {\r\n                //All else must be XML from table.xml so throw it into the transformer and get JSON back.\r\n                if (response.data == \"Not enough monitoring data\") {\r\n                  //Fixes Issue #5 - reject the promise with a message. The message is displayed instead of an uncaught exception.\r\n                  return Promise.reject({\r\n                    message:\r\n                      \"Not enough monitoring data.\\n\\nRequest:\\n\" +\r\n                      params +\r\n                      \"\\n\"\r\n                  });\r\n                }\r\n                if (response.data.length > 200) {\r\n                  return new XMLXform(method, response.data);\r\n                } else {\r\n                  console.log(\"Short Response! :( \\n\" + response.data);\r\n                  return {};\r\n                }\r\n              }\r\n            },\r\n            error => {\r\n              return Promise.reject(error.status + \": \" + error.statusText);\r\n            }\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Only used in connection testing\r\n     * \r\n     * @return Promise\r\n     */\r\n    getVersion() {\r\n      return this.performPRTGAPIRequest(\"status.json\").then(function(response) {\r\n        if (!response) {\r\n          return \"ERROR. No response.\";\r\n        } else {\r\n          return response.Version;\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Authenticate to the PRTG interface\r\n     * Only used in connection testing because PRTG API is sessionless.\r\n     * \r\n     * @return Promise\r\n     */\r\n    performPRTGAPILogin() {\r\n      const username = this.username;\r\n      const passhash = this.passhash;\r\n      const options = {\r\n        method: \"GET\",\r\n        url:\r\n          this.url +\r\n          \"/getstatus.htm?id=0&username=\" +\r\n          username +\r\n          \"&passhash=\" +\r\n          passhash\r\n      };\r\n      return this.backendSrv.datasourceRequest(options).then(response => {\r\n        this.passhash = response;\r\n        return response;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Query API for list of groups\r\n     *\r\n     * @return Promise - JSON result set\r\n     */\r\n    performGroupSuggestQuery() {\r\n      const params =\r\n        \"content=groups&columns=objid,group,probe,tags,active,status,message,priority\";\r\n      return this.performPRTGAPIRequest(\"table.json\", params);\r\n    }\r\n\r\n    /**\r\n     * Query API for list of devices\r\n     * @param {string} groupFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @return Promise - JSON result set\r\n     */\r\n    performDeviceSuggestQuery(groupFilter) {\r\n      let params =\r\n        \"content=devices&columns=objid,device,group,probe,tags,active,status,message,priority\";\r\n      if (groupFilter) {\r\n        params += \",group\" + groupFilter;\r\n      }\r\n      return this.performPRTGAPIRequest(\"table.json\", params);\r\n    }\r\n\r\n    /**\r\n     * Query API for list of sensors bound to a given device\r\n     * @param {string} deviceFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @return promise - JSON result set\r\n     */\r\n    performSensorSuggestQuery(deviceFilter) {\r\n      const params =\r\n        \"content=sensors&columns=objid,sensor,device,group,probe,tags,active,status,message,priority\" +\r\n        deviceFilter;\r\n      return this.performPRTGAPIRequest(\"table.json\", params);\r\n    }\r\n\r\n    /**\r\n     * Filter a PRTG collection against a filter string \r\n     * \r\n     * @param {collection} items - PRTG Data object \r\n     * @param {string} queryStr - Query filter, raw string, comma separated strings, or regular expression pattern\r\n     * @param {boolean} invert - when set to boolean true, negates the return value. \r\n     * @return {boolean} result of text expression\r\n     */\r\n    filterQuery(items, queryStr, invert = false) {\r\n      /**\r\n       * group device sensor includes properties:\r\n       * objid: num\r\n       * sensor: Name\r\n       * device: Device name\r\n       * group: Group name\r\n       * tags: comma separated\r\n       * active: true|false\r\n       * active_raw: -1 for true? wtf\r\n       * status: Status text\r\n       * status_raw: number\r\n       * message: html message\r\n       * message_raw: text message\r\n       * priority: number 1-5\r\n       */\r\n      let filterItems = [];\r\n      if (queryStr.match(/{[^{}]+}/g)) {\r\n        filterItems = _.trim(queryStr, \"{}\").split(\",\");\r\n      } else {\r\n        filterItems.push(queryStr);\r\n      }\r\n      return _.filter(items, item => {\r\n        let findItem;\r\n        if (item.group && !item.device) {\r\n          findItem = item.group;\r\n        } else if (item.device && !item.sensor) {\r\n          findItem = item.device;\r\n        } else if (item.sensor && !item.name) {\r\n          findItem = item.sensor;\r\n        } else if (item.name) {\r\n          findItem = item.name;\r\n        } else {\r\n          return false;\r\n        }\r\n        if (utils.isRegex(queryStr)) {\r\n          const rex = utils.buildRegex(queryStr);\r\n          const result = rex.test(findItem);\r\n          if (invert) {\r\n            return !result;\r\n          }\r\n          return result;\r\n        }\r\n        if (filterItems.length === 0) {\r\n          return true;\r\n        }\r\n        if (invert) {\r\n          return !filterItems.includes(findItem);\r\n        }\r\n        return filterItems.includes(findItem);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Retrive groups and filter with an optional filter string\r\n     * \r\n     * @param {string} groupFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @return {collection} - filtered PRTG data object\r\n     */\r\n    getGroups(groupFilter = \"/.*/\") {\r\n      console.log(\"getGroups('\" + groupFilter + \"')\");\r\n      return this.performGroupSuggestQuery().then(groups => {\r\n        return this.filterQuery(groups, groupFilter);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Retrieve hosts and filter with an optional filter string.\r\n     * \r\n     * @param {*} groupFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @param {*} hostFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @return {collection} - filtered PRTG data object\r\n     */\r\n    getHosts(groupFilter = \"/.*/\", hostFilter = \"/.*/\") {\r\n      return this.getGroups(groupFilter).then(filteredGroups => {\r\n        const filters = [];\r\n        _.each(filteredGroups, group => {\r\n          filters.push(\"filter_group=\" + group.group);\r\n        });\r\n        return this.performDeviceSuggestQuery(\r\n          \"&\" + filters.join(\"&\")\r\n        ).then(devices => {\r\n          return this.filterQuery(devices, hostFilter);\r\n        });\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Retrieve sensors and filter with an optional filter string.\r\n     * \r\n     * @param {string} groupFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @param {string} hostFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @param {string} sensorFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @return {collection} - filtered PRTG data object\r\n     */\r\n    getSensors(\r\n      groupFilter = \"/.*/\",\r\n      hostFilter = \"/.*/\",\r\n      sensorFilter = \"/.*/\"\r\n    ) {\r\n      return this.getHosts(groupFilter, hostFilter).then(hosts => {\r\n        const filters = [];\r\n        _.each(hosts, host => {\r\n          filters.push(\"filter_device=\" + host.device);\r\n        });\r\n        return this.performSensorSuggestQuery(\r\n          \"&\" + filters.join(\"&\")\r\n        ).then(sensors => {\r\n          return this.filterQuery(sensors, sensorFilter);\r\n        });\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Retrieve full data object with channel definitions using an optional filter string\r\n     * \r\n     * @param {*} groupFilter - raw string, comma separated strings, or regular expression pattern \r\n     * @param {*} hostFilter - raw string, comma separated strings, or regular expression pattern \r\n     * @param {*} sensorFilter - raw string, comma separated strings, or regular expression pattern \r\n     * @return {collection} - PRTG data object with channel and sensor properties\r\n     */\r\n    getAllItems(\r\n      groupFilter = \"/.*/\",\r\n      hostFilter = \"/.*/\",\r\n      sensorFilter = \"/.*/\"\r\n    ) {\r\n      return this.getSensors(\r\n        groupFilter,\r\n        hostFilter,\r\n        sensorFilter\r\n      ).then(sensors => {\r\n        /**\r\n         * In this context, if i simply iterate an array with _.each and then execute performPRTGAPIRequest, even\r\n         * though the returned object is a promise which can be used in a chain, the execution falls outside of the existing\r\n         * promise chain and thus executs asynchronously. To keep everything in the same execution context, create a\r\n         * promise array for each object, then execute them in context.\r\n         */\r\n        const promises = _.map(sensors, sensor => {\r\n          const params =\r\n            \"content=channels&columns=sensor,name&id=\" + sensor.objid;\r\n          return this.performPRTGAPIRequest(\r\n            \"table.json\",\r\n            params\r\n          ).then(channels => {\r\n            /**\r\n             * Create an object that contains all of the information necessary to query this metric.\r\n             * This information will be used at render time to group the datapoints and name them.\r\n             */\r\n            return Promise.all(\r\n              _.map(channels, channel => {\r\n                channel.sensor = sensor.objid;\r\n                channel.sensor_raw = sensor.sensor;\r\n                channel.device = sensor.device;\r\n                channel.group = sensor.group;\r\n                channel.channel = channel.name;\r\n                return channel;\r\n              })\r\n            );\r\n          });\r\n        });\r\n        return Promise.all(promises).then(_.flatten);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Retrieve full data object with channel definitions using an optional filter string.\r\n     * The results are then filtered against a channelFilter expression.\r\n     * \r\n     * @param {string} groupFilter - raw string, comma separated strings, or regular expression patter \r\n     * @param {string} deviceFilter - raw string, comma separated strings, or regular expression patter \r\n     * @param {string} sensorFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @param {string} channelFilter - raw string, comma separated strings, or regular expression pattern\r\n     * @param {boolean} invertChannelFilter - if set to boolean true, negates the result of the channelFilter expression\r\n     */\r\n    getItems(\r\n      groupFilter,\r\n      deviceFilter,\r\n      sensorFilter,\r\n      channelFilter,\r\n      invertChannelFilter = false\r\n    ) {\r\n      return this.getAllItems(\r\n        groupFilter,\r\n        deviceFilter,\r\n        sensorFilter\r\n      ).then(items => {\r\n        return this.filterQuery(items, channelFilter, invertChannelFilter);\r\n      });\r\n    }\r\n    getItemsFromTarget(target) {\r\n      if (target.options) {\r\n        if (target.options.invertChannelFilter) {\r\n          return this.getItems(\r\n            target.group.name,\r\n            target.device.name,\r\n            target.sensor.name,\r\n            target.channel.name,\r\n            true\r\n          );\r\n        } else {\r\n          return this.getItems(\r\n            target.group.name,\r\n            target.device.name,\r\n            target.sensor.name,\r\n            target.channel.name\r\n          );\r\n        }\r\n      }\r\n      return this.getItems(\r\n        target.group.name,\r\n        target.device.name,\r\n        target.sensor.name,\r\n        target.channel.name\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Retrieve history data from a single sensor.\r\n     * @param {number} sensor - sensor ID\r\n     * @param {string} channel - channel name\r\n     * @param {number} dateFrom - timestamp of start time\r\n     * @param {number} dateTo - timestamp of end time\r\n     */\r\n    getItemHistory(sensor, channel, dateFrom, dateTo) {\r\n      const hours = (dateTo - dateFrom) / 3600;\r\n      let avg = 0;\r\n      if (hours > 12 && hours < 36) {\r\n        avg = \"300\";\r\n      } else if (hours > 36 && hours < 745) {\r\n        avg = \"3600\";\r\n      } else if (hours > 745) {\r\n        avg = \"86400\";\r\n      }\r\n\r\n      const method = \"historicdata.xml\";\r\n      const params =\r\n        \"id=\" +\r\n        sensor +\r\n        \"&sdate=\" +\r\n        this.getPRTGDate(dateFrom) +\r\n        \"&edate=\" +\r\n        this.getPRTGDate(dateTo) +\r\n        \"&avg=\" +\r\n        avg +\r\n        \"&pctshow=false&pctmode=false\";\r\n      /*\r\n             * Modified to read the \"statusid\" value, this can then be mapped via lookup table to a PRTG status type\r\n             * 1=Unknown, 2=Scanning, 3=Up, 4=Warning, 5=Down, 6=No Probe, 7=Paused by User, 8=Paused by Dependency,\r\n             * 9=Paused by Schedule, 10=Unusual, 11=Not Licensed, 12=Paused Until, 13=Down Acknowledged, 14=Down Partial\r\n             */\r\n      const history = [];\r\n      return this.performPRTGAPIRequest(method, params).then(results => {\r\n        if (!results.histdata) {\r\n          return history;\r\n        }\r\n        const rCnt = results.histdata.item.length;\r\n\r\n        for (let iter = 0; iter < rCnt; iter++) {\r\n          let val;\r\n          const prtgDate = results.histdata.item[iter].datetime_raw;\r\n          const dt = new Date((prtgDate - 25569) * 86400 * 1000);\r\n          //var dt = Math.round((results.histdata.item[i].datetime_raw - 25568) * 86400,0) * 1000;\r\n          if (\r\n            results.histdata.item[iter].value_raw &&\r\n              results.histdata.item[iter].value_raw.length > 0\r\n          ) {\r\n            //FIXME: better way of dealing with multiple channels of same name\r\n            //IE you select \"Traffic In\" but PRTG provides Volume AND Speed channels.\r\n            for (\r\n              let iter2 = 0;\r\n              iter2 < results.histdata.item[iter].value_raw.length;\r\n              iter2++\r\n            ) {\r\n              //workaround for SNMP Bandwidth Issue #3. Check for presence of (speed) suffix, and use that.\r\n              if (\r\n                results.histdata.item[iter].value_raw[iter2].channel.match(\r\n                  channel + \" [(]speed[)]\"\r\n                ) ||\r\n                  results.histdata.item[iter].value_raw[iter2].channel == channel\r\n              ) {\r\n                val = Number(results.histdata.item[iter].value_raw[iter2].text);\r\n              }\r\n            }\r\n          } else if (results.histdata.item[iter].value_raw) {\r\n            val = Number(results.histdata.item[iter].value_raw.text);\r\n          }\r\n          history.push({\r\n            sensor: sensor,\r\n            channel: channel,\r\n            datetime: dt,\r\n            value: val\r\n          });\r\n        }\r\n        return history;\r\n      });\r\n    }\r\n    \r\n\r\n    /**\r\n     * Retrieve messages for a given sensor. Used only for annotation queries.\r\n     * \r\n     * @param {number} from - Earliest time in range\r\n     * @param {number} to - Latest time in range\r\n     * @param {number} sensorId - Numeric ID of Sensor \r\n     */\r\n    getMessages(from, to, sensorId) {\r\n      const method = \"table.json\";\r\n      const params =\r\n        \"&content=messages&columns=objid,datetime,parent,type,name,status,message&id=\" +\r\n        sensorId;\r\n      return this.performPRTGAPIRequest(method, params).then(function(\r\n        messages\r\n      ) {\r\n        const events = [];\r\n        let time = 0;\r\n        _.each(messages, function(message) {\r\n          time = Math.round((message.datetime_raw - 25569) * 86400, 0);\r\n          if (time > from && time < to) {\r\n            events.push({\r\n              time: time * 1000,\r\n              title: message.status,\r\n              text:\r\n                \"<p>\" +\r\n                message.parent +\r\n                \"(\" +\r\n                message.type +\r\n                \") Message:<br>\" +\r\n                message.message +\r\n                \"</p>\"\r\n            });\r\n          }\r\n        });\r\n        return events;\r\n      });\r\n    }\r\n  }\r\n  return PRTGAPI;\r\n}\r\n\r\n//register a new module\r\nangular.module(\"grafana.services\").factory(\"PRTGAPIService\", PRTGAPIService);\r\n"]}