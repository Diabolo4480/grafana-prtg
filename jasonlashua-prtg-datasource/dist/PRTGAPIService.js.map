{"version":3,"sources":["../src/PRTGAPIService.js"],"names":["PRTGAPIService","alertSrv","backendSrv","PRTGAPI","api_url","username","passhash","cacheTimeoutMinutes","url","lastId","cache","Date","now","hashValue","Promise","resolve","data","getCache","str","hash","length","i","char","charCodeAt","a","slice","unixtime","d","s","getFullYear","pad","getMonth","getDate","getHours","getMinutes","getSeconds","join","method","params","queryString","options","inCache","setCache","datasourceRequest","then","response","reject","message","groups","devices","sensors","channels","values","sensordata","messages","Version","XMLXform","err","match","regex","res","exec","performPRTGAPIRequest","groupName","deviceId","sensorId","device","arr","p","_","map","getDeviceByName","sensor","getSensorByName","all","objid","name","concat","channelId","dateFrom","dateTo","deviceObj","e","sensorObj","hours","avg","getPRTGDate","results","lastmessage","timestamp","lastcheck","replace","dt","Math","round","result","histdata","rCnt","item","v","datetime_raw","value_raw","j","channel","Number","text","push","from","to","events","time","each","title","status","parent","type","angular","module","factory"],"mappings":"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","file":"PRTGAPIService.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport { XMLXform } from './xmlparser';\n/**\n * PRTG API Service\n * Implements the high level functions that process data from PRTG\n */\n\n/** @ngInject */\nfunction PRTGAPIService(alertSrv, backendSrv) {\n    \n    class PRTGAPI {\n        constructor (api_url, username, passhash, cacheTimeoutMinutes) {\n          this.url              = api_url;\n          this.username         = username;\n          this.passhash         = passhash;\n          this.lastId           = false;\n          this.cache            = {};\n          this.cacheTimeoutMinutes = cacheTimeoutMinutes;\n          this.alertSrv         = alertSrv;\n          this.backendSrv       = backendSrv;\n          \n        }\n        \n        /**\n         * Tests whether a url has been stored in the cache.\n         * Returns boolean true | false\n         */\n        inCache(url) {\n            if ((Date.now() - this.cache[this.hashValue(url)]) > (this.cacheTimeoutMinutes * 60 * 1000)) {\n                return false;\n            }\n            if (this.cache[this.hashValue(url)]) {\n                return true;\n            }\n            return false;\n        }\n        \n        /**\n        * retrieves a cached data result from the cache\n        *\n        * @param  url the URL of the request\n        * @return promise\n        */\n        getCache(url)    {\n            return Promise.resolve(this.cache[this.hashValue(url)]);\n        }\n        \n        /**\n        * stores a data result in the cache\n        *\n        * @param  url the URL of the request\n        * @param  data the response.data object of the request\n        * @return promise\n        */\n        setCache(url, data)    {\n            this.cache[this.hashValue(url)] = data;\n            return this.getCache(url);\n        }\n        \n        /**\n        * simple clone of a java hash value\n        * Kevin \"Pancake\" (http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/)\n        *\n        * @param  e string to hash\n        * @return int32\n        */\n        hashValue(str) {\n            var hash = 0;\n            if (str.length === 0) return hash;\n            for (var i = 0; i < str.length; i++) {\n                var char = str.charCodeAt(i);\n                hash = ((hash<<5)-hash)+char;\n                hash = hash & hash; // Convert to 32bit integer\n            }\n            return hash;\n        }\n        \n        /**\n         * pad date parts and optionally add one\n         */\n        pad(i,a)\t{\n            if (a) return (\"0\" + (i + 1)).slice(-2);\n            return (\"0\" + i).slice(-2);\n        }\n        \n        /**\n        * convert a UNIX timestamp into a PRTG date string for queries\n        * YYYY-MM-DD-HH-MM-SS\n        */\n        getPRTGDate(unixtime) \t{\n            var d = new Date(unixtime * 1000);\n            var s = [d.getFullYear(), this.pad(d.getMonth(),true), this.pad(d.getDate()), this.pad(d.getHours()), this.pad(d.getMinutes()), this.pad(d.getSeconds())];\n            //console.log(\"date string: \" + s.join(\"-\"));\n            return s.join(\"-\");\n        }\n\t\n        /**\n         * Request data from PRTG API\n         *\n         * @param  method the API method (e.g., table.json)\n         * @param  params HTTP query string query parameters\n         * @return promise\n         */\n        performPRTGAPIRequest(method, params) {\n            var queryString = 'username=' + this.username + '&passhash=' + this.passhash + '&' + params;\n            var options = {\n                method: 'GET',\n                url: this.url + '/' + method + '?' + queryString\n            };\n            \n            if (this.inCache(options.url)) {\n              return this.getCache(options.url);\n            } else {\n              return this.setCache(options.url, this.backendSrv.datasourceRequest(options)\n                .then(response => {\n                    if (!response.data) {\n                        return Promise.reject({message: \"Response contained no data\"});\n                    } \n                    \n                    if (response.data.groups) {\n                      return response.data.groups;\n                    }\n                    else if (response.data.devices) {\n                      return response.data.devices;\n                    }\n                    else if (response.data.sensors) {\n                      return response.data.sensors;\n                    }\n                    else if (response.data.channels) {\n                      return response.data.channels;\n                    }\n                    else if (response.data.values) {\n                      return response.data.values;\n                    }\n                    else if (response.data.sensordata) {\n                      return response.data.sensordata;\n                    }\n                    else if (response.data.messages) {\n                      return response.data.messages;\n                    }\n                    else if (response.data.Version) { //status request\n                      return response.data;\n                    } else {  //All else is XML from table.xml so throw it into the transformer and get JSON back.\n                      if (response.data == \"Not enough monitoring data\") {\n                        //Fixes Issue #5 - reject the promise with a message. The message is displayed instead of an uncaught exception.\n                        return Promise.reject({message: \"<p style=\\\"font-size: 150%; font-weight: bold\\\">Not enough monitoring data.</p><p>Request:<br> &quot;\" + params + \"&quot;</p>\"});\n                      }\n                      return new XMLXform(method, response.data);\n                    }\n              }, err => {\n                if (err.data.match(/<error>/g)) {\n                  var regex = /<error>(.*)<\\/error>/g;\n                  var res = regex.exec(err.data);\n                  err.message = res[1];\n                } else {\n                  err.message = \"Unknown error: \" + err.data;\n                }\n                return Promise.reject(err);\n              }));\n            }   \n        }\n    \n        getVersion() {\n            return this.performPRTGAPIRequest('status.json').then(function (response) {\n                if (!response)\n                {\n                  return \"ERROR. No response.\";\n                } else {\n                  return response.Version;\n                }\n            });\n        }\n    \n        /**\n         * Authenticate to the PRTG interface\n         * not implemented yet (pass username/pass as query string/POST data)\n         */\n        performPRTGAPILogin() {\n            var username = this.username;\n            var passhash = this.passhash;\n            var options = {\n                method: 'GET',\n                url: this.url + \"/getstatus.htm?id=0&username=\" + username + \"&passhash=\" + passhash\n            };\n            return this.backendSrv.datasourceRequest(options).then(response => {\n                this.passhash = response;\n                return response;\n            });\n        }\n    \n        /**\n         * Query API for list of groups\n         *\n         * @return promise - JSON result set\n         */\n        performGroupSuggestQuery() {\n            var params = 'content=groups&columns=objid,group';\n            return this.performPRTGAPIRequest('table.json', params);\n        }\n    \n        /**\n         * Query API for list of devices\n         *\n         * @return promise - JSON result set\n         */\n        performDeviceSuggestQuery(groupName) {\n            var params = 'content=devices&columns=objid,device';\n            if (groupName) {\n                params += ',group&filter_group=' + groupName;\n            }\n            return this.performPRTGAPIRequest('table.json', params);\n        }\n    \n        /**\n         * Query API for list of sensors bound to a given device\n         *\n         * @return promise - JSON result set\n         */\n        performSensorSuggestQuery(deviceId) {\n            var params = 'content=sensors&columns=objid,sensor,device,group&filter_device=' + deviceId;\n            return this.performPRTGAPIRequest('table.json', params);\n        }\n    \n        /**\n         * Query API for list of channels bound to a given sensor\n         * the sensor Id is unique to each device\n         *\n         * @return promise - JSON result set\n         */\n        performChannelSuggestQuery(sensorId, device) {\n            var arr = [{\"device\": device}, {\"sensor\":sensorId}];\n            var p = [];\n            p = _.map(arr, a => {\n                if (a.device && typeof a.device == \"string\") {\n                     return this.getDeviceByName(a.device);\n                }\n                \n                if (a.sensor && typeof a.sensor == \"string\") {\n                    return this.getSensorByName(a.sensor,arr[0].device);\n                }\n                \n            });\n            \n            return Promise.all(p).then(a => {\n                var sensor = a[1][0].objid;\n                var params = 'content=channels&columns=objid,channel,sensor,name&id=' + sensor;\n                return this.performPRTGAPIRequest('table.json', params);\n            });\n        }\n    \n        /**\n         *  For Templating: Retrieve device ObjId by it's name.\n         */\n        getDeviceByName(name)    {\n            var params = 'content=devices&columns=objid,device&filter_device=' + name;\n            return this.performPRTGAPIRequest('table.json', params);\n        }\n\n        /**\n         *  For Templating: Retrieve Sensor ObjId by it's name and parent device ObjId\n         */\n        getSensorByName(name, device)    {\n            var params = 'content=sensors&columns=objid,device,sensor&id=' + device + '&filter_sensor=' + name;\n            return this.performPRTGAPIRequest('table.json', params);\n        }\n    \n        /**\n         * For templating: Retrieve Channel id from its given name.\n         * Sensor ID (number) required.\n         */\n        getChannelByName(name, sensor) {\n            var params = 'content=channels&columns=objid,channel,channelid&id='+ sensor;\n            if (name !== \"*\") {\n                params = params.concat('&filter_channel=' + name);\n            }\n            return this.performPRTGAPIRequest('table.json', params);\n        }\n    \n        /**\n         * Query API for data of a given sensorId and then return the\n         * matching channel data\n         * @param deviceId Name of Device\n         * @param  sensorId Name of Sensor\n         * @param  channelId Name of Channel\n         * @param dateFrom  Earliest time in range\n         * @param dateTo Latest time in range\n         * @return array\n         */\n        getValues(deviceId, sensorId, channelId, dateFrom, dateTo) {\n            return this.getDeviceByName(deviceId).then(deviceObj => {\n                var device;\n                try {\n                    device = deviceObj[0].objid;\n                } catch (e) {\n                    return [];\n                }       \n                return this.getSensorByName(sensorId, device).then(sensorObj => {\n                    var sensor = sensorObj[0].objid;\n                    var hours = ((dateTo-dateFrom) / 3600);\n                    var avg = 0;\n                    if (hours > 12 && hours < 36) {\n                        avg = \"300\";\n                    } else if (hours > 36 && hours < 745) {\n                        avg = \"3600\";\n                    } else if (hours > 745) {\n                        avg = \"86400\";\n                    }\n                \n                    var method = \"historicdata.xml\";\n                    var params = \"id=\" + sensor + \"&sdate=\" + this.getPRTGDate(dateFrom) + \"&edate=\" + this.getPRTGDate(dateTo) + \"&avg=\" + avg + \"&pctshow=false&pctmode=false\";\n            \n                    if (channelId == '!') {\n                        params = \"&id=\" + sensor;\n                        return this.performPRTGAPIRequest('getsensordetails.json', params).then(results => {\n                            var message = results.lastmessage;\n                            var timestamp = results.lastcheck.replace(/(\\s\\[[\\d\\smsago\\]]+)/g,'');\n                            var dt = Math.round((timestamp - 25569) * 86400,0) * 1000;\n                            return [message, dt];\n                        });\n                    } else {\n                        return this.performPRTGAPIRequest(method, params).then(results => {\n                            var result = [];\n                            if (!results.histdata) {\n                                return results;\n                            }\n                            var rCnt = results.histdata.item.length;\n        \n                            for (var i=0;i<rCnt;i++)\n                            {\n                                var v;\n                                var dt = Math.round((results.histdata.item[i].datetime_raw - 25569) * 86400,0) * 1000;\n                                if (results.histdata.item[i].value_raw && (results.histdata.item[i].value_raw.length > 0))\n                                {\n                                    //FIXME: better way of dealing with multiple channels of same name\n                                    //IE you select \"Traffic In\" but PRTG provides Volume AND Speed channels.\n                                    for (var j = 0; j < results.histdata.item[i].value_raw.length; j++) {\n                                      //workaround for SNMP Bandwidth Issue #3. Check for presence of (speed) suffix, and use that.\n                                      if (results.histdata.item[i].value_raw[j].channel.match(channelId + ' [(]speed[)]') || results.histdata.item[i].value_raw[j].channel == channelId) {\n                                        v = Number(results.histdata.item[i].value_raw[j].text);\n                                      }\n                                    }\n                                } else if (results.histdata.item[i].value_raw) {\n                                     v = Number(results.histdata.item[i].value_raw.text);\n                                }\n                                result.push([v, dt]);\n                            }\n                            return result;\n                        });\n                    }\n                });\n            });\n        }\n        \n        /**\n         * Retrieve messages for a given sensor.\n         * \n         * @param from Earliest time in range\n         * @param to Latest time in range\n         * @sensorId Numeric ID of Sensor \n         */\n        getMessages(from, to, sensorId) {\n         var method = \"table.json\";\n          var params = \"&content=messages&columns=objid,datetime,parent,type,name,status,message&id=\" + sensorId;\n          return this.performPRTGAPIRequest(method, params).then(function(messages) {\n            var events = [];\n            var time = 0;\n              _.each(messages, function(message) {\n                time = Math.round((message.datetime_raw - 25569) * 86400,0);\n                if (time > from && time < to) {\n                  events.push({\n                  time: time * 1000,\n                  title: message.status,\n                  text: '<p>' + message.parent + '(' + message.type + ') Message:<br>'+ message.message +'</p>'\n                  });\n                }\n              });\n              return events;\n            });\n        }\n    }\n    return PRTGAPI;\n}\n\n//register a new module\nangular.module('grafana.services').factory('PRTGAPIService', PRTGAPIService);\n"]}