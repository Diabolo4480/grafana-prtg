{"version":3,"sources":["../src/PRTGAPIService.js"],"names":["PRTGAPIService","$q","alertSrv","backendSrv","PRTGAPI","api_url","username","password","useCache","cacheTimeoutMinutes","url","passhash","lastId","cache","Date","now","hashValue","d","defer","resolve","promise","data","e","r","i","length","charCodeAt","a","slice","unixtime","s","getFullYear","pad","getMonth","getDate","getHours","getMinutes","getSeconds","join","method","params","queryString","options","inCache","getCache","setCache","datasourceRequest","then","response","reject","message","groups","devices","sensors","channels","values","sensordata","messages","Version","XMLXform","err","match","regex","res","exec","performPRTGAPIRequest","self","groupName","deviceId","sensorId","device","arr","p","_","map","getDeviceByName","sensor","getSensorByName","all","objid","name","concat","channelId","dateFrom","dateTo","deviceObj","sensorObj","hours","avg","getPRTGDate","results","lastmessage","timestamp","lastcheck","replace","dt","Math","round","result","histdata","rCnt","item","datetime_raw","value_raw","j","channel","v","Number","text","push","from","to","events","time","each","title","status","parent","type","angular","module","factory"],"mappings":"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","file":"PRTGAPIService.js","sourcesContent":["import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport { XMLXform } from './xmlparser';\r\n/**\r\n * PRTG API Service\r\n * Implements the high level functions that process data from PRTG\r\n */\r\n\r\n/** @ngInject */\r\nfunction PRTGAPIService($q, alertSrv, backendSrv) {\r\n    \r\n    class PRTGAPI {\r\n        constructor (api_url, username, password, useCache, cacheTimeoutMinutes) {\r\n          this.url              = api_url;\r\n          this.username         = username;\r\n          this.password         = password;\r\n          this.passhash         = null;\r\n          this.lastId           = false;\r\n          this.cache            = {};\r\n          this.useCache = \t\tuseCache;\r\n          this.cacheTimeoutMinutes = cacheTimeoutMinutes;\r\n          this.alertSrv         = alertSrv;\r\n          this.backendSrv       = backendSrv;\r\n          \r\n        }\r\n        \r\n        /**\r\n         * Tests whether a url has been stored in the cache.\r\n         * Returns boolean true | false\r\n         */\r\n        inCache(url) {\r\n            if ((Date.now() - this.cache[this.hashValue(url)]) > (this.cacheTimeoutMinutes * 60 * 1000)) {\r\n                return false;\r\n            }\r\n            if (this.useCache && this.cache[this.hashValue(url)]) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        \r\n        /**\r\n        * retrieves a cached data result from the cache\r\n        *\r\n        * @param  url the URL of the request\r\n        * @return promise\r\n        */\r\n        getCache(url)    {\r\n            var d = $q.defer();\r\n            d.resolve(this.cache[this.hashValue(url)]);\r\n            return d.promise;\r\n        }\r\n        \r\n        /**\r\n        * stores a data result in the cache\r\n        *\r\n        * @param  url the URL of the request\r\n        * @param  data the response.data object of the request\r\n        * @return promise\r\n        */\r\n        setCache(url, data)    {\r\n            var d = $q.defer();\r\n            this.cache[this.hashValue(url)] = data;\r\n            d.resolve(this.cache[this.hashValue(url)]);\r\n            return d.promise;\r\n        }\r\n        \r\n        /**\r\n        * simple clone of a java hash value\r\n        * Kevin \"Pancake\" (http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/)\r\n        *\r\n        * @param  e string to hash\r\n        * @return int32\r\n        */\r\n        hashValue(e)    {for(var r=0,i=0;i<e.length;i++)r=(r<<5)-r+e.charCodeAt(i),r&=r;return r}\r\n        \r\n        /**\r\n         * pad date parts and optionally add one\r\n         */\r\n        pad(i,a)\t{\r\n            if (a) return (\"0\" + (i + 1)).slice(-2);\r\n            return (\"0\" + i).slice(-2);\r\n        }\r\n        \r\n        /**\r\n        * convert a UNIX timestamp into a PRTG date string for queries\r\n        * YYYY-MM-DD-HH-MM-SS\r\n        */\r\n        getPRTGDate(unixtime) \t{\r\n            var d = new Date(unixtime * 1000);\r\n            var s = [d.getFullYear(), this.pad(d.getMonth(),true), this.pad(d.getDate()), this.pad(d.getHours()), this.pad(d.getMinutes()), this.pad(d.getSeconds())];\r\n            //console.log(\"date string: \" + s.join(\"-\"));\r\n            return s.join(\"-\");\r\n        }\r\n\t\r\n        /**\r\n         * Request data from PRTG API\r\n         *\r\n         * @param  method the API method (e.g., table.json)\r\n         * @param  params HTTP query string query parameters\r\n         * @return promise\r\n         */\r\n        performPRTGAPIRequest(method, params) {\r\n            var queryString = 'username=' + this.username + '&password=' + this.password + '&' + params;\r\n            var options = {\r\n                method: 'GET',\r\n                url: this.url + '/' + method + '?' + queryString\r\n            };\r\n      \r\n            var d = $q.defer(); //required to keep execution within the originating promise's context\r\n            if (this.inCache(options.url)) {\r\n              return this.getCache(options.url);\r\n            } else {\r\n              return this.setCache(options.url, this.backendSrv.datasourceRequest(options).then(function (response) {\r\n                if (!response.data) {\r\n                  d.reject({message: \"Response contained no data\"});\r\n                  return d.promise;\r\n                } \r\n          \r\n                if (response.data.groups) {\r\n                  return response.data.groups;\r\n                }\r\n                else if (response.data.devices) {\r\n                  return response.data.devices;\r\n                }\r\n                else if (response.data.sensors) {\r\n                  return response.data.sensors;\r\n                }\r\n                else if (response.data.channels) {\r\n                  return response.data.channels;\r\n                }\r\n                else if (response.data.values) {\r\n                  return response.data.values;\r\n                }\r\n                else if (response.data.sensordata) {\r\n                  return response.data.sensordata;\r\n                }\r\n                else if (response.data.messages) {\r\n                  return response.data.messages;\r\n                }\r\n                else if (response.data.Version) { //status request\r\n                  return response.data;\r\n                } else {  //All else is XML from table.xml so throw it into the transformer and get JSON back.\r\n                  if (response.data == \"Not enough monitoring data\") {\r\n                    //Fixes Issue #5 - reject the promise with a message. The message is displayed instead of an uncaught exception.\r\n                    d.reject({message: \"<p style=\\\"font-size: 150%; font-weight: bold\\\">Not enough monitoring data.</p><p>Request:<br> &quot;\" + params + \"&quot;</p>\"});\r\n                    return d.promise;\r\n                  }\r\n                  return new XMLXform(method, response.data);\r\n                }\r\n              }, function (err) {\r\n                if (err.data.match(/<error>/g)) {\r\n                  var regex = /<error>(.*)<\\/error>/g;\r\n                  var res = regex.exec(err.data);\r\n                  err.message = res[1];\r\n                } else {\r\n                  err.message = \"Unknown error: \" + err.data;\r\n                }\r\n                d.reject(err);\r\n                return d.promise;\r\n              }));\r\n            }   \r\n        }\r\n    \r\n        getVersion() {\r\n            return this.performPRTGAPIRequest('status.json').then(function (response) {\r\n                if (!response)\r\n                {\r\n                  return \"ERROR. No response.\";\r\n                } else {\r\n                  return response.Version;\r\n              }\r\n            });\r\n        }\r\n    \r\n        /**\r\n         * Authenticate to the PRTG interface\r\n         * not implemented yet (pass username/pass as query string/POST data)\r\n         */\r\n        performPRTGAPILogin() {\r\n            var username = this.username;\r\n            var password = this.password;\r\n            var options = {\r\n                method: 'GET',\r\n                url: this.url + \"/getpasshash.htm?username=\" + username + \"&password=\" + password\r\n            };\r\n            var self = this; //fix for es6? \r\n            return this.backendSrv.datasourceRequest(options).then(function (response) {\r\n                self.passhash = response;\r\n                return response;\r\n            });\r\n        }\r\n    \r\n        /**\r\n         * Query API for list of groups\r\n         *\r\n         * @return promise - JSON result set\r\n         */\r\n        performGroupSuggestQuery() {\r\n            var params = 'content=groups&columns=objid,group';\r\n            return this.performPRTGAPIRequest('table.json', params);\r\n        }\r\n    \r\n        /**\r\n         * Query API for list of devices\r\n         *\r\n         * @return promise - JSON result set\r\n         */\r\n        performDeviceSuggestQuery(groupName) {\r\n            var params = 'content=devices&columns=objid,device';\r\n            if (groupName) {\r\n                params += ',group&filter_group=' + groupName;\r\n            }\r\n            return this.performPRTGAPIRequest('table.json', params);\r\n        }\r\n    \r\n        /**\r\n         * Query API for list of sensors bound to a given device\r\n         *\r\n         * @return promise - JSON result set\r\n         */\r\n        performSensorSuggestQuery(deviceId) {\r\n            var params = 'content=sensors&columns=objid,sensor,device,group&filter_device=' + deviceId;\r\n            return this.performPRTGAPIRequest('table.json', params);\r\n        }\r\n    \r\n        /**\r\n         * Query API for list of channels bound to a given sensor\r\n         * the sensor Id is unique to each device\r\n         *\r\n         * @return promise - JSON result set\r\n         */\r\n        performChannelSuggestQuery(sensorId, device) {\r\n            var self = this;\r\n            var arr = [{\"device\": device}, {\"sensor\":sensorId}];\r\n            var p = [];\r\n            p = _.map(arr, function(a) {\r\n                if (a.device && typeof a.device == \"string\") {\r\n                     return self.getDeviceByName(a.device);\r\n                }\r\n                \r\n                if (a.sensor && typeof a.sensor == \"string\") {\r\n                    return self.getSensorByName(a.sensor,arr[0].device);\r\n                }\r\n                \r\n            });\r\n            \r\n            return $q.all(p).then(function(a) {\r\n                var sensor = a[1][0].objid;\r\n                var params = 'content=channels&columns=objid,channel,sensor,name&id=' + sensor;\r\n                return self.performPRTGAPIRequest('table.json', params);\r\n            });\r\n        }\r\n    \r\n        /**\r\n         *  For Templating: Retrieve device ObjId by it's name.\r\n         */\r\n        getDeviceByName(name)    {\r\n            var params = 'content=devices&columns=objid,device&filter_device=' + name;\r\n            return this.performPRTGAPIRequest('table.json', params);\r\n        }\r\n\r\n        /**\r\n         *  For Templating: Retrieve Sensor ObjId by it's name and parent device ObjId\r\n         */\r\n        getSensorByName(name, device)    {\r\n            var params = 'content=sensors&columns=objid,device,sensor&id=' + device + '&filter_sensor=' + name;\r\n            return this.performPRTGAPIRequest('table.json', params);\r\n        }\r\n    \r\n        /**\r\n         * For templating: Retrieve Channel id from its given name.\r\n         * Sensor ID (number) required.\r\n         */\r\n        getChannelByName(name, sensor) {\r\n            var params = 'content=channels&columns=objid,channel,channelid&id='+ sensor;\r\n            if (name !== \"*\") {\r\n                params = params.concat('&filter_channel=' + name);\r\n            }\r\n            return this.performPRTGAPIRequest('table.json', params);\r\n        }\r\n    \r\n        /**\r\n         * Query API for data of a given sensorId and then return the\r\n         * matching channel data\r\n         * @param deviceId Name of Device\r\n         * @param  sensorId Name of Sensor\r\n         * @param  channelId Name of Channel\r\n         * @param dateFrom  Earliest time in range\r\n         * @param dateTo Latest time in range\r\n         * @return array\r\n         */\r\n        getValues(deviceId, sensorId, channelId, dateFrom, dateTo) {\r\n            var self = this;\r\n            return this.getDeviceByName(deviceId).then(function (deviceObj) {\r\n                try {\r\n                    var device = deviceObj[0].objid;\r\n                } catch (e) {\r\n                    return [];\r\n                }\r\n                return self.getSensorByName(sensorId, device).then(function(sensorObj) {\r\n                    var sensor = sensorObj[0].objid;\r\n                    var hours = ((dateTo-dateFrom) / 3600);\r\n                    var avg = 0;\r\n                    if (hours > 12 && hours < 36) {\r\n                        avg = \"300\";\r\n                    } else if (hours > 36 && hours < 745) {\r\n                        avg = \"3600\";\r\n                    } else if (hours > 745) {\r\n                        avg = \"86400\";\r\n                    }\r\n                \r\n                    var method = \"historicdata.xml\";\r\n                    var params = \"id=\" + sensor + \"&sdate=\" + self.getPRTGDate(dateFrom) + \"&edate=\" + self.getPRTGDate(dateTo) + \"&avg=\" + avg + \"&pctshow=false&pctmode=false\";\r\n            \r\n                    if (channelId == '!') {\r\n                        var params = \"&id=\" + sensor;\r\n                        return self.performPRTGAPIRequest('getsensordetails.json', params).then(function (results) {\r\n                            var message = results.lastmessage;\r\n                            var timestamp = results.lastcheck.replace(/(\\s\\[[\\d\\smsago\\]]+)/g,'');\r\n                            var dt = Math.round((timestamp - 25569) * 86400,0) * 1000;\r\n                            return [message, dt];\r\n                        });\r\n                    } else {\r\n                        return self.performPRTGAPIRequest(method, params).then(function(results) {\r\n                            var result = [];\r\n                            if (!results.histdata) {\r\n                                return results;\r\n                            }\r\n                            var rCnt = results.histdata.item.length;\r\n        \r\n                            for (var i=0;i<rCnt;i++)\r\n                            {\r\n                                \r\n                                var dt = Math.round((results.histdata.item[i].datetime_raw - 25569) * 86400,0) * 1000;\r\n                                if (results.histdata.item[i].value_raw && (results.histdata.item[i].value_raw.length > 0))\r\n                                {\r\n                                    for (var j = 0; j < results.histdata.item[i].value_raw.length; j++) {\r\n                                      //workaround for SNMP Bandwidth Issue #3. Check for presence of (speed) suffix, and use that.\r\n                                      if (results.histdata.item[i].value_raw[j].channel.match(channelId + \" (speed)\") || results.histdata.item[i].value_raw[j].channel == channelId) {\r\n                                        var v = Number(results.histdata.item[i].value_raw[j].text);\r\n                                      }\r\n                                    }\r\n                                } else if (results.histdata.item[i].value_raw) {\r\n                                    var v = Number(results.histdata.item[i].value_raw.text);\r\n                                }\r\n                                result.push([v, dt]);\r\n                            }\r\n                            return result;\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        /**\r\n         * Retrieve messages for a given sensor.\r\n         * \r\n         * @param from Earliest time in range\r\n         * @param to Latest time in range\r\n         * @sensorId Numeric ID of Sensor \r\n         */\r\n        getMessages(from, to, sensorId) {\r\n         var method = \"table.json\";\r\n          var params = \"&content=messages&columns=objid,datetime,parent,type,name,status,message&id=\" + sensorId;\r\n          return this.performPRTGAPIRequest(method, params).then(function(messages) {\r\n            var events = [];\r\n            var time = 0;\r\n              _.each(messages, function(message) {\r\n                time = Math.round((message.datetime_raw - 25569) * 86400,0);\r\n                if (time > from && time < to) {\r\n                  events.push({\r\n                  time: time * 1000,\r\n                  title: message.status,\r\n                  text: '<p>' + message.parent + '(' + message.type + ') Message:<br>'+ message.message +'</p>'\r\n                  });\r\n                }\r\n              });\r\n              return events;\r\n            });\r\n        }\r\n    }\r\n    return PRTGAPI;\r\n}\r\n\r\n//register a new module\r\nangular.module('grafana.services').factory('PRTGAPIService', PRTGAPIService);\r\n"]}