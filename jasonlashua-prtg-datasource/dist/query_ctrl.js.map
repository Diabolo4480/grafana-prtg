{"version":3,"sources":["../src/query_ctrl.js"],"names":["getMetricNames","scope","metricList","_","uniq","map","metric","QueryCtrl","utils","PRTGQueryController","$scope","$injector","$rootScope","$sce","templateSrv","$on","targetChange","variableChanged","init","target","targetLetters","scopeDefaults","oldTarget","cloneDeep","defaults","updateGroupList","updateDeviceList","updateSensorList","updateChannelList","errors","validateTarget","getGroupNames","partial","getDeviceNames","getSensorNames","getChannelNames","newTarget","isEqual","panelCtrl","refresh","some","item","name","indexOf","setTargetAlias","groupList","visible_name","addTemplatedVariables","datasource","prtgAPI","performGroupSuggestQuery","then","groups","push","group","deviceList","undefined","replace","getHosts","devices","device","sensorList","performSensorSuggestQuery","sensors","sensor","channelList","performChannelSuggestQuery","channels","channel","each","variables","variable","templated","errs","str","isRegex","isTemplateVariable","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuMA;AACA,WAASA,cAAT,CAAwBC,KAAxB,EAA+BC,UAA/B,EAA2C;AACzC,WAAOC,EAAEC,IAAF,CAAOD,EAAEE,GAAF,CAAMJ,MAAMK,MAAN,CAAaJ,UAAb,CAAN,EAAgC,MAAhC,CAAP,CAAP;AACD;;;AAlMOK,e,kBAAAA,S;;AACDJ,O;;AACKK,W;;;;;;;;;;;;;;;;;;;;;qCAOCC,mB;;;AAEX,qCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,IAA3C,EAAiDC,WAAjD,EAA8D;AAAA;;AAAA,gJACtDJ,MADsD,EAC9CC,SAD8C;;AAE5DD,iBAAOK,GAAP,CAAW,mBAAX,EAAgC,YAAM;AACpC,kBAAKC,YAAL;AACD,WAFD;;AAIAJ,qBAAWG,GAAX,CAAe,iCAAf,EAAkD;AAAA,mBAAM,MAAKE,eAAL,EAAN;AAAA,WAAlD;;AAEA,gBAAKC,IAAL,GAAY,YAAW;AACrB,gBAAIC,SAAS,KAAKA,MAAlB;AACA,iBAAKL,WAAL,GAAmBA,WAAnB;AACA,iBAAKM,aAAL,GAAqB,4BAArB;AACA,gBAAIC,gBAAgB;AAClBf,sBAAQ,EADU;AAElBgB,yBAAWnB,EAAEoB,SAAF,CAAY,KAAKJ,MAAjB;AAFO,aAApB;AAIAhB,cAAEqB,QAAF,CAAW,IAAX,EAAiBH,aAAjB;;AAEA,iBAAKI,eAAL;AACA,iBAAKC,gBAAL;AACA,iBAAKC,gBAAL;AACA,iBAAKC,iBAAL;;AAEA,iBAAKT,MAAL,CAAYU,MAAZ,GAAqB,KAAKC,cAAL,CAAoBX,MAApB,CAArB;;AAEA;AACA,iBAAKY,aAAL,GAAqB5B,EAAE6B,OAAF,CAAUhC,cAAV,EAA0B,IAA1B,EAAgC,WAAhC,CAArB;AACA,iBAAKiC,cAAL,GAAsB9B,EAAE6B,OAAF,CAAUhC,cAAV,EAA0B,IAA1B,EAAgC,YAAhC,CAAtB;AACA,iBAAKkC,cAAL,GAAsB/B,EAAE6B,OAAF,CAAUhC,cAAV,EAA0B,IAA1B,EAAgC,YAAhC,CAAtB;AACA,iBAAKmC,eAAL,GAAuBhC,EAAE6B,OAAF,CAAUhC,cAAV,EAA0B,IAA1B,EAAgC,aAAhC,CAAvB;AACD,WAtBD;AAuBA,gBAAKkB,IAAL;AA/B4D;AAgC7D;;AAED;;;;;;;2CAGiB,CAEhB;AADC;;;AAGF;;;;yCACe;AACb,gBAAIkB,YAAYjC,EAAEoB,SAAF,CAAY,KAAKJ,MAAjB,CAAhB;AACA,gBAAI,CAAChB,EAAEkC,OAAF,CAAU,KAAKf,SAAf,EAA0B,KAAKH,MAA/B,CAAL,EAA6C;AAC3C,mBAAKG,SAAL,GAAiBc,SAAjB;AACA,mBAAKE,SAAL,CAAeC,OAAf;AACD;AACF;;;4CAEiB;AAAA;;AAEhBpC,cAAEqC,IAAF,CAAO,CAAC,OAAD,EAAS,QAAT,EAAkB,QAAlB,CAAP,EAAoC,gBAAQ;AACxC,kBAAG,OAAKrB,MAAL,CAAYsB,IAAZ,EAAkBC,IAAlB,CAAuBC,OAAvB,CAA+B,GAA/B,IAAsC,CAAzC,EAA4C;AACxC,uBAAK3B,YAAL;AACD;AACJ,aAJH;AAKD;;;wCAQa;AACZ,iBAAKU,gBAAL;AACA,iBAAKV,YAAL;AACD;;;yCAEc;AACb,iBAAKW,gBAAL;AACA,iBAAKX,YAAL;AACD;;;yCAEc;AACb,iBAAKY,iBAAL;AACA,iBAAKZ,YAAL;AACD;;;0CAEe;AACd,iBAAK4B,cAAL;AACA,iBAAK5B,YAAL;AACD;;;4CAKiB;AAAA;;AAChB,iBAAKV,MAAL,CAAYuC,SAAZ,GAAwB,CAAC,EAACH,MAAM,GAAP,EAAYI,cAAc,KAA1B,EAAD,CAAxB;AACA,iBAAKC,qBAAL,CAA2B,KAAKzC,MAAL,CAAYuC,SAAvC;AACA,iBAAKG,UAAL,CAAgBC,OAAhB,CAAwBC,wBAAxB,GAAmDC,IAAnD,CAAwD,kBAAU;AAChEhD,gBAAEE,GAAF,CAAM+C,MAAN,EAAc,iBAAS;AACrB,uBAAK9C,MAAL,CAAYuC,SAAZ,CAAsBQ,IAAtB,CAA2B,EAACX,MAAMY,MAAMA,KAAb,EAAoBR,cAAcQ,MAAMA,KAAxC,EAA3B;AACD,eAFD;AAGD,aAJD;AAKD;;;6CAEkB;AAAA;;AACjB,gBAAIA,KAAJ;AACA,iBAAKhD,MAAL,CAAYiD,UAAZ,GAAyB,CAAC,EAACb,MAAM,GAAP,EAAYI,cAAc,KAA1B,EAAD,CAAzB;AACA,iBAAKC,qBAAL,CAA2B,KAAKzC,MAAL,CAAYiD,UAAvC;AACA,gBAAI,KAAKpC,MAAL,CAAYmC,KAAhB,EAAuB;AACrBA,sBAAQ,KAAKnC,MAAL,CAAYmC,KAAZ,CAAkBZ,IAAlB,IAA0Bc,SAAlC;AACAF,sBAAQ,KAAKxC,WAAL,CAAiB2C,OAAjB,CAAyBH,KAAzB,CAAR;AACD;AACD,iBAAKN,UAAL,CAAgBC,OAAhB,CAAwBS,QAAxB,CAAiCJ,KAAjC,EAAwC,MAAxC,EAAgDH,IAAhD,CAAqD,mBAAW;AACpE;AACMhD,gBAAEE,GAAF,CAAMsD,OAAN,EAAe,kBAAU;AACvB,uBAAKrD,MAAL,CAAYiD,UAAZ,CAAuBF,IAAvB,CAA4B,EAACX,MAAMkB,OAAOA,MAAd,EAAsBd,cAAcc,OAAOA,MAA3C,EAA5B;AACD,eAFD;AAGD,aALD;AAMD;;;6CAEkB;AAAA;;AACjB,gBAAIA,MAAJ;AACA,iBAAKtD,MAAL,CAAYuD,UAAZ,GAAyB,CAAC,EAACnB,MAAM,GAAP,EAAYI,cAAc,KAA1B,EAAD,CAAzB;AACA,iBAAKC,qBAAL,CAA2B,KAAKzC,MAAL,CAAYuD,UAAvC;AACA,gBAAI,KAAK1C,MAAL,CAAYyC,MAAhB,EAAwB;AACtBA,uBAAS,KAAKzC,MAAL,CAAYyC,MAAZ,CAAmBlB,IAAnB,IAA2Bc,SAApC;AACAI,uBAAS,KAAK9C,WAAL,CAAiB2C,OAAjB,CAAyBG,MAAzB,CAAT;AACD;AACD,iBAAKZ,UAAL,CAAgBC,OAAhB,CAAwBa,yBAAxB,CAAkDF,MAAlD,EAA0DT,IAA1D,CAA+D,mBAAW;AACxEhD,gBAAEE,GAAF,CAAM0D,OAAN,EAAe,kBAAU;AACvB,uBAAKzD,MAAL,CAAYuD,UAAZ,CAAuBR,IAAvB,CAA4B,EAACX,MAAMsB,OAAOA,MAAd,EAAsBlB,cAAckB,OAAOA,MAA3C,EAA5B;AACD,eAFD;AAGD,aAJD;AAKD;;;8CAEmB;AAAA;;AAClB,gBAAIA,MAAJ,EAAYJ,MAAZ;AACA,iBAAKtD,MAAL,CAAY2D,WAAZ,GAA0B,CAAC,EAACvB,MAAM,QAAP,EAAiBI,cAAc,cAA/B,EAAD,EAAgD,EAACJ,MAAM,UAAP,EAAmBI,cAAc,UAAjC,EAAhD,CAA1B;AACA,iBAAKC,qBAAL,CAA2B,KAAKzC,MAAL,CAAY2D,WAAvC;AACA,gBAAI,KAAK9C,MAAL,CAAY6C,MAAhB,EAAwB;AACtBA,uBAAS,KAAK7C,MAAL,CAAY6C,MAAZ,CAAmBtB,IAA5B;AACAsB,uBAAS,KAAKlD,WAAL,CAAiB2C,OAAjB,CAAyBO,MAAzB,CAAT;AACAJ,uBAAS,KAAK9C,WAAL,CAAiB2C,OAAjB,CAAyB,KAAKtC,MAAL,CAAYyC,MAAZ,CAAmBlB,IAA5C,CAAT;AACA,mBAAKM,UAAL,CAAgBC,OAAhB,CAAwBiB,0BAAxB,CAAmDF,MAAnD,EAA2DJ,MAA3D,EAAmET,IAAnE,CAAwE,oBAAY;AAClFhD,kBAAEE,GAAF,CAAM8D,QAAN,EAAgB,mBAAW;AACzB,yBAAK7D,MAAL,CAAY2D,WAAZ,CAAwBZ,IAAxB,CAA6B,EAACX,MAAM0B,QAAQ1B,IAAf,EAAqBI,cAAcsB,QAAQ1B,IAA3C,EAA7B;AACD,iBAFD;AAGD,eAJD;AAKD;AACF;;;gDAOqBxC,U,EAAY;AAChCC,cAAEkE,IAAF,CAAO,KAAKvD,WAAL,CAAiBwD,SAAxB,EAAmC,UAASC,QAAT,EAAmB;AACpDrE,yBAAWmD,IAAX,CAAgB;AACdX,sBAAM,MAAM6B,SAAS7B,IADP;AAEd8B,2BAAW;AAFG,eAAhB;AAID,aALD;AAMD;;;yCAGcrD,M,EAAQ;AACrB,gBAAIsD,OAAO,EAAX;AACA,gBAAI,CAACtD,MAAL,EAAa;AACXsD,qBAAO,aAAP;AACD;AACD,mBAAOA,IAAP;AACD;;;kCAEOC,G,EAAK;AACX,mBAAOlE,MAAMmE,OAAN,CAAcD,GAAd,CAAP;AACD;;;qCAEUA,G,EAAK;AACd,mBAAOlE,MAAMoE,kBAAN,CAAyBF,GAAzB,CAAP;AACD;;;;QAhLsCnE,S;;;;AAmLzC;AACAE,0BAAoBoE,WAApB,GAAkC,8BAAlC","file":"query_ctrl.js","sourcesContent":["/**\n * Grafana Datasource Plugin for PRTG API Interface (ALPHA)\n * Query Control Interface\n * 20170218 Jason Lashua\n *\n * Updated for es6\n */\n\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport * as utils from './utils';\nimport './css/query-editor.css!';\n\n//zabbix style function editor, create angular directives to provide flyout menu to select functions\n//import './add-metric-function.directive';\n//import './metric-function-editor.directive';\n\nexport class PRTGQueryController extends QueryCtrl {\n\n  constructor($scope, $injector, $rootScope, $sce, templateSrv) {\n    super($scope, $injector);\n    $scope.$on('typeahead-updated', () => {\n      this.targetChange();\n    });\n    \n    $rootScope.$on('template-variable-value-updated', () => this.variableChanged());\n    \n    this.init = function() {\n      var target = this.target;\n      this.templateSrv = templateSrv;\n      this.targetLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      var scopeDefaults = {\n        metric: {},\n        oldTarget: _.cloneDeep(this.target)\n      };\n      _.defaults(this, scopeDefaults);\n      \n      this.updateGroupList();\n      this.updateDeviceList();\n      this.updateSensorList();\n      this.updateChannelList();\n\n      this.target.errors = this.validateTarget(target);\n    \n      //the zabbix-grafana guys are way more smarter than i am, brilliant idea.      \n      this.getGroupNames = _.partial(getMetricNames, this, 'groupList');\n      this.getDeviceNames = _.partial(getMetricNames, this, 'deviceList');\n      this.getSensorNames = _.partial(getMetricNames, this, 'sensorList');\n      this.getChannelNames = _.partial(getMetricNames, this, 'channelList');\n    };\n    this.init();\n  }\n  \n  /**\n  * Alias is comprised of the device name, sensor and channel, e.g., FILESERV1: DNS Response Time.\n  */\n  setTargetAlias() {\n    //this.target.alias = this.target.channel.name);\n  }\n  \n  // take action on target update and refresh the model? whatever the hell angular actually does is beyond me... \n  targetChange() {\n    var newTarget = _.cloneDeep(this.target);\n    if (!_.isEqual(this.oldTarget, this.target)) {\n      this.oldTarget = newTarget;\n      this.panelCtrl.refresh();\n    }\n  }\n  \n  variableChanged() {\n    \n    _.some(['group','device','sensor'], item => {\n        if(this.target[item].name.indexOf('$') > 0) {\n            this.targetChange();\n          } \n      });\n  }\n\n  /*\n   * Select functions: when a object is selected or typed into the input,\n   * refresh the next list based on the data entered in the previous input.\n   * This is all necessary because the only way to get values from PRTG is by knowing a sensor ID\n   * So we basically perform a single object search, one peice at a time, then we know the sensor ID, and the channel name can be picked.\n   */\n  selectGroup() {\n    this.updateDeviceList();\n    this.targetChange();\n  }\n  \n  selectDevice() {\n    this.updateSensorList();\n    this.targetChange();\n  }\n  \n  selectSensor() {\n    this.updateChannelList();\n    this.targetChange();\n  }\n  \n  selectChannel() {\n    this.setTargetAlias();\n    this.targetChange();\n  }\n  \n  /*\n   * Update the content of each list\n  */   \n  updateGroupList() {\n    this.metric.groupList = [{name: '*', visible_name: 'All'}];\n    this.addTemplatedVariables(this.metric.groupList);\n    this.datasource.prtgAPI.performGroupSuggestQuery().then(groups => {\n      _.map(groups, group => { \n        this.metric.groupList.push({name: group.group, visible_name: group.group});\n      });\n    });\n  }\n  \n  updateDeviceList() {\n    var group;\n    this.metric.deviceList = [{name: '*', visible_name: 'All'}];\n    this.addTemplatedVariables(this.metric.deviceList);\n    if (this.target.group) {\n      group = this.target.group.name || undefined;\n      group = this.templateSrv.replace(group);\n    }\n    this.datasource.prtgAPI.getHosts(group, '/.*/').then(devices => {\n//this.datasource.prtgAPI.performDeviceSuggestQuery(group).then(devices => {\n      _.map(devices, device => {\n        this.metric.deviceList.push({name: device.device, visible_name: device.device});\n      });\n    });\n  }\n\n  updateSensorList() {\n    var device;\n    this.metric.sensorList = [{name: '*', visible_name: 'All'}];\n    this.addTemplatedVariables(this.metric.sensorList);\n    if (this.target.device) {\n      device = this.target.device.name || undefined;\n      device = this.templateSrv.replace(device);\n    }\n    this.datasource.prtgAPI.performSensorSuggestQuery(device).then(sensors => {\n      _.map(sensors, sensor => {\n        this.metric.sensorList.push({name: sensor.sensor, visible_name: sensor.sensor});\n      });\n    });\n  }\n\n  updateChannelList() {\n    var sensor, device;\n    this.metric.channelList = [{name: 'status', visible_name: 'Last Message'},{name: 'messages', visible_name: 'Messages'}];\n    this.addTemplatedVariables(this.metric.channelList);\n    if (this.target.sensor) {\n      sensor = this.target.sensor.name;\n      sensor = this.templateSrv.replace(sensor);\n      device = this.templateSrv.replace(this.target.device.name);\n      this.datasource.prtgAPI.performChannelSuggestQuery(sensor, device).then(channels => {\n        _.map(channels, channel => {\n          this.metric.channelList.push({name: channel.name, visible_name: channel.name});\n        });\n      });\n    }\n  }\n\n  /**\n  * Add templated variables to list of available metrics\n  *\n  * @param {Array} metricList List of metrics which variables add to\n  */\n  addTemplatedVariables(metricList) {\n    _.each(this.templateSrv.variables, function(variable) {\n      metricList.push({\n        name: '$' + variable.name,\n        templated: true\n      });\n    });\n  }\n\n  // just validate the target exists for now.\n  validateTarget(target) {\n    var errs = {};\n    if (!target) {\n      errs = 'Not defined';\n    }\n    return errs;\n  }\n  \n  isRegex(str) {\n    return utils.isRegex(str);\n  }\n\n  isVariable(str) {\n    return utils.isTemplateVariable(str);\n  }  \n}\n\n// Set templateUrl as static property\nPRTGQueryController.templateUrl = './partials/query.editor.html';\n\n// I stole this from grafana-zabbix, err, I mean, I was inspired by grafana-zabbix ;) \nfunction getMetricNames(scope, metricList) {  \n  return _.uniq(_.map(scope.metric[metricList], 'name'));\n}\n"]}