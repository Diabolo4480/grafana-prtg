{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","_","PRTGQueryController","$scope","$injector","$sce","$q","templateSrv","init","target","targetLetters","scopeDefaults","metric","oldTarget","cloneDeep","defaults","groupList","deviceList","sensorList","channelList","updateGroupList","updateDeviceList","updateSensorList","updateChannelList","setChannelAlias","errors","validateTarget","alias","channel","name","isEqual","isEmpty","angular","copy","panelCtrl","refresh","number","channelFilter","clone","panel","targets","push","fromIndex","toIndex","move","self","visible_name","addTemplatedVariables","datasource","prtgAPI","performGroupSuggestQuery","then","groups","map","group","undefined","replace","performDeviceSuggestQuery","devices","device","performSensorSuggestQuery","sensors","sensor","performChannelSuggestQuery","channels","metricList","each","variables","variable","templated","errs","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUQA,e,kBAAAA,S;;AACDC,O;;;;;;;;;;;;;;;;;;;;;qCAEMC,mB;;;AAEX;AACA,qCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,EAArC,EAAyCC,WAAzC,EAAsD;AAAA;;AAAA,gJAI9CJ,MAJ8C,EAItCC,SAJsC;;AAKpD,gBAAKI,IAAL,GAAY,YAAW;AACrB,gBAAIC,SAAS,KAAKA,MAAlB;AACA,iBAAKF,WAAL,GAAmBA,WAAnB;AACA,iBAAKG,aAAL,GAAqB,4BAArB;AACA,gBAAIC,gBAAgB;AAClBC,sBAAQ,EADU;AAElBC,yBAAWZ,EAAEa,SAAF,CAAY,KAAKL,MAAjB;AAFO,aAApB;AAIAR,cAAEc,QAAF,CAAW,IAAX,EAAiBJ,aAAjB;;AAEA,iBAAKC,MAAL,GAAc;AACZI,yBAAW,CAAC,YAAD,CADC;AAEZC,0BAAY,CAAC,YAAD,CAFA;AAGZC,0BAAY,CAAC,YAAD,CAHA;AAIZC,2BAAa,CAAC,YAAD;AAJD,aAAd;;AAOA;AACA,iBAAKC,eAAL;AACA,iBAAKC,gBAAL;AACA,iBAAKC,gBAAL;AACA,iBAAKC,iBAAL;AACA,iBAAKC,eAAL;AACA,iBAAKf,MAAL,CAAYgB,MAAZ,GAAqB,KAAKC,cAAL,CAAoBjB,MAApB,CAArB;AACD,WAxBD;AAyBA,gBAAKD,IAAL;AA9BoD;AA+BrD;AACD;;;;;;;4CAGkB;AAChB,gBAAI,CAAC,KAAKC,MAAL,CAAYkB,KAAb,IAAsB,KAAKlB,MAAL,CAAYmB,OAAtC,EAA+C;AAC7C,mBAAKnB,MAAL,CAAYkB,KAAZ,GAAoB,KAAKlB,MAAL,CAAYmB,OAAZ,CAAoBC,IAAxC;AACD;AACF;;;uCAEY;AACX,iBAAKL,eAAL;AACA,iBAAKf,MAAL,CAAYgB,MAAZ,GAAqBC,eAAe,KAAKjB,MAApB,CAArB;AACA,gBAAI,CAACR,EAAE6B,OAAF,CAAU,KAAKjB,SAAf,EAA0B,KAAKJ,MAA/B,CAAD,IAA2CR,EAAE8B,OAAF,CAAU,KAAKtB,MAAL,CAAYgB,MAAtB,CAA/C,EAA8E;AAC5E,mBAAKZ,SAAL,GAAiBmB,QAAQC,IAAR,CAAa,KAAKxB,MAAlB,CAAjB;AACA,mBAAKyB,SAAL,CAAeC,OAAf;AACD;AACF;;;wCAMa;AACZ,iBAAKd,gBAAL;AACA,iBAAKZ,MAAL,CAAYgB,MAAZ,GAAqB,KAAKC,cAAL,CAAoB,KAAKjB,MAAzB,CAArB;AACA,gBAAI,CAACR,EAAE6B,OAAF,CAAU,KAAKjB,SAAf,EAA0B,KAAKJ,MAA/B,CAAD,IAA2CR,EAAE8B,OAAF,CAAU,KAAKtB,MAAL,CAAYgB,MAAtB,CAA/C,EAA8E;AAC5E,mBAAKZ,SAAL,GAAiBmB,QAAQC,IAAR,CAAa,KAAKxB,MAAlB,CAAjB;AACA,mBAAKyB,SAAL,CAAeC,OAAf;AACD;AACF;;;yCAEc;AACb,iBAAKb,gBAAL;;AAEA,iBAAKb,MAAL,CAAYgB,MAAZ,GAAqB,KAAKC,cAAL,CAAoB,KAAKjB,MAAzB,CAArB;AACA,gBAAI,CAACR,EAAE6B,OAAF,CAAU,KAAKjB,SAAf,EAA0B,KAAKJ,MAA/B,CAAD,IAA2CR,EAAE8B,OAAF,CAAU,KAAKtB,MAAL,CAAYgB,MAAtB,CAA/C,EAA8E;AAC5E,mBAAKZ,SAAL,GAAiBmB,QAAQC,IAAR,CAAa,KAAKxB,MAAlB,CAAjB;AACA,mBAAKyB,SAAL,CAAeC,OAAf;AACD;AACF;;;yCAEc;AACb,iBAAKZ,iBAAL;AACA,iBAAKC,eAAL;AACA,iBAAKf,MAAL,CAAYgB,MAAZ,GAAqB,KAAKC,cAAL,CAAoB,KAAKjB,MAAzB,CAArB;AACA,gBAAI,CAACR,EAAE6B,OAAF,CAAU,KAAKjB,SAAf,EAA0B,KAAKJ,MAA/B,CAAD,IAA2CR,EAAE8B,OAAF,CAAU,KAAKtB,MAAL,CAAYgB,MAAtB,CAA/C,EAA8E;AAC5E,mBAAKZ,SAAL,GAAiBmB,QAAQC,IAAR,CAAa,KAAKxB,MAAlB,CAAjB;AACA,mBAAKyB,SAAL,CAAeC,OAAf;AACD;AACF;;;0CAEe;AACd,iBAAK1B,MAAL,CAAYgB,MAAZ,GAAqB,KAAKC,cAAL,CAAoB,KAAKjB,MAAzB,CAArB;AACA,gBAAI,CAACR,EAAE6B,OAAF,CAAU,KAAKjB,SAAf,EAA0B,KAAKJ,MAA/B,CAAD,IAA2CR,EAAE8B,OAAF,CAAU,KAAKtB,MAAL,CAAYgB,MAAtB,CAA/C,EAA8E;AAC5E,mBAAKZ,SAAL,GAAiBmB,QAAQC,IAAR,CAAa,KAAKxB,MAAlB,CAAjB;AACA,mBAAKyB,SAAL,CAAeC,OAAf;AACD;AACF;;;0CAEe;AACd,iBAAK1B,MAAL,CAAYgB,MAAZ,GAAqB,KAAKC,cAAL,CAAoB,KAAKjB,MAAzB,CAArB;AACA,gBAAI,CAACR,EAAE6B,OAAF,CAAU,KAAKjB,SAAf,EAA0B,KAAKJ,MAA/B,CAAD,IAA2CR,EAAE8B,OAAF,CAAU,KAAKtB,MAAL,CAAYgB,MAAtB,CAA/C,EAA8E;AAC5E,mBAAKhB,MAAL,CAAYmB,OAAZ,CAAoBC,IAApB,GAA2BO,OAAO,KAAKvB,SAAL,CAAee,OAAf,CAAuBC,IAA9B,IAAsC,KAAKpB,MAAL,CAAY4B,aAA7E;AACA,mBAAKxB,SAAL,GAAiBmB,QAAQC,IAAR,CAAa,KAAKxB,MAAlB,CAAjB;AACA,mBAAKyB,SAAL,CAAeC,OAAf;AACD;AACF;;;sCAGW;AACV,gBAAIG,QAAQN,QAAQC,IAAR,CAAa,KAAKxB,MAAlB,CAAZ;AACA,iBAAK8B,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwBH,KAAxB;AACD;;;0CAEeI,S,EAAWC,O,EAAS;AAClC1C,cAAE2C,IAAF,CAAO,KAAKL,KAAL,CAAWC,OAAlB,EAA2BE,SAA3B,EAAsCC,OAAtC;AACD;;;4CAMiB;AAChB,gBAAIE,OAAO,IAAX;AACAA,iBAAKjC,MAAL,CAAYI,SAAZ,GAAwB,CAAC,EAACa,MAAM,GAAP,EAAYiB,cAAc,KAA1B,EAAD,CAAxB;AACA,iBAAKC,qBAAL,CAA2BF,KAAKjC,MAAL,CAAYI,SAAvC;AACA,iBAAKgC,UAAL,CAAgBC,OAAhB,CAAwBC,wBAAxB,GAAmDC,IAAnD,CAAwD,UAAUC,MAAV,EAAkB;AACxEnD,gBAAEoD,GAAF,CAAMD,MAAN,EAAc,UAASE,KAAT,EAAgB;AAC5BT,qBAAKjC,MAAL,CAAYI,SAAZ,CAAsByB,IAAtB,CAA2B,EAACZ,MAAMyB,MAAMA,KAAb,EAAoBR,cAAcQ,MAAMA,KAAxC,EAA3B;AACD,eAFD;AAGD,aAJD;AAKD;;;6CAEkB;AACjB,gBAAIT,OAAO,IAAX;AACA,gBAAIO,MAAJ;AACAP,iBAAKjC,MAAL,CAAYK,UAAZ,GAAyB,CAAC,EAACY,MAAM,GAAP,EAAYiB,cAAc,KAA1B,EAAD,CAAzB;AACA,iBAAKC,qBAAL,CAA2BF,KAAKjC,MAAL,CAAYK,UAAvC;AACA,gBAAI,KAAKR,MAAL,CAAY6C,KAAhB,EAAuB;AACrBF,uBAAS,KAAK3C,MAAL,CAAY6C,KAAZ,CAAkBzB,IAAlB,IAA0B0B,SAAnC;AACD;AACD,gBAAI,OAAOH,MAAP,IAAiB,QAArB,EAA+B;AAC7BA,uBAAS,KAAK7C,WAAL,CAAiBiD,OAAjB,CAAyBJ,MAAzB,CAAT;AACD;AACD,iBAAKJ,UAAL,CAAgBC,OAAhB,CAAwBQ,yBAAxB,CAAkDL,MAAlD,EAA0DD,IAA1D,CAA+D,UAAUO,OAAV,EAAmB;AAChFzD,gBAAEoD,GAAF,CAAMK,OAAN,EAAe,UAASC,MAAT,EAAiB;AAC9Bd,qBAAKjC,MAAL,CAAYK,UAAZ,CAAuBwB,IAAvB,CAA4B,EAACZ,MAAM8B,OAAOA,MAAd,EAAsBb,cAAca,OAAOA,MAA3C,EAA5B;AACD,eAFD;AAGD,aAJD;AAKD;;;6CAEkB;AACjB,gBAAId,OAAO,IAAX;AACA,gBAAIc,MAAJ;AACAd,iBAAKjC,MAAL,CAAYM,UAAZ,GAAyB,CAAC,EAACW,MAAM,GAAP,EAAYiB,cAAc,KAA1B,EAAD,CAAzB;AACA,iBAAKC,qBAAL,CAA2BF,KAAKjC,MAAL,CAAYM,UAAvC;AACA,gBAAI,KAAKT,MAAL,CAAYkD,MAAhB,EAAwB;AACtBA,uBAAS,KAAKlD,MAAL,CAAYkD,MAAZ,CAAmB9B,IAAnB,IAA2B0B,SAApC;AACD;AACD,gBAAI,OAAOI,MAAP,IAAiB,QAArB,EAA+B;AAC7BA,uBAAS,KAAKpD,WAAL,CAAiBiD,OAAjB,CAAyBG,MAAzB,CAAT;AACD;AACD,iBAAKX,UAAL,CAAgBC,OAAhB,CAAwBW,yBAAxB,CAAkDD,MAAlD,EAA0DR,IAA1D,CAA+D,UAAUU,OAAV,EAAmB;AAChF5D,gBAAEoD,GAAF,CAAMQ,OAAN,EAAe,UAASC,MAAT,EAAiB;AAC9BjB,qBAAKjC,MAAL,CAAYM,UAAZ,CAAuBuB,IAAvB,CAA4B,EAACZ,MAAMiC,OAAOA,MAAd,EAAsBhB,cAAcgB,OAAOA,MAA3C,EAA5B;AACD,eAFD;AAGD,aAJD;AAKD;;;8CAEmB;AAClB,gBAAIjB,OAAO,IAAX;AACA,gBAAIiB,MAAJ,EAAYH,MAAZ;AACAd,iBAAKjC,MAAL,CAAYO,WAAZ,GAA0B,CAAC,EAACU,MAAM,GAAP,EAAYiB,cAAc,KAA1B,EAAD,EAAkC,EAACjB,MAAM,GAAP,EAAYiB,cAAc,cAA1B,EAAlC,CAA1B;AACA,iBAAKC,qBAAL,CAA2BF,KAAKjC,MAAL,CAAYO,WAAvC;AACA,gBAAI,KAAKV,MAAL,CAAYqD,MAAhB,EAAwB;AACtBA,uBAAS,KAAKrD,MAAL,CAAYqD,MAAZ,CAAmBjC,IAAnB,IAA2B0B,SAApC;AACA,kBAAI,OAAOO,MAAP,IAAiB,QAArB,EAA+B;AAC7BA,yBAAS,KAAKvD,WAAL,CAAiBiD,OAAjB,CAAyBM,MAAzB,CAAT;AACAH,yBAAS,KAAKpD,WAAL,CAAiBiD,OAAjB,CAAyBX,KAAKpC,MAAL,CAAYkD,MAAZ,CAAmB9B,IAA5C,CAAT;AACD;AACD,mBAAKmB,UAAL,CAAgBC,OAAhB,CAAwBc,0BAAxB,CAAmDD,MAAnD,EAA2DH,MAA3D,EAAmER,IAAnE,CAAwE,UAAUa,QAAV,EAAoB;AAC1F/D,kBAAEoD,GAAF,CAAMW,QAAN,EAAgB,UAASpC,OAAT,EAAkB;AAChCiB,uBAAKjC,MAAL,CAAYO,WAAZ,CAAwBsB,IAAxB,CAA6B,EAACZ,MAAMD,QAAQC,IAAf,EAAqBiB,cAAcD,KAAKpC,MAAL,CAAYqD,MAAZ,CAAmBhB,YAAnB,GAAkC,IAAlC,GAAyClB,QAAQC,IAApF,EAA7B;AACD,iBAFD;AAGD,eAJD;AAKD;AACF;;;gDAOqBoC,U,EAAY;AAChChE,cAAEiE,IAAF,CAAO,KAAK3D,WAAL,CAAiB4D,SAAxB,EAAmC,UAASC,QAAT,EAAmB;AACpDH,yBAAWxB,IAAX,CAAgB;AACdZ,sBAAM,MAAMuC,SAASvC,IADP;AAEdwC,2BAAW;AAFG,eAAhB;AAID,aALD;AAMD;;;yCAGc5D,M,EAAQ;AACrB,gBAAI6D,OAAO,EAAX;AACA,gBAAI,CAAC7D,MAAL,EAAa;AACX6D,qBAAO,aAAP;AACD;AACD,mBAAOA,IAAP;AACD;;;;QA5MsCtE,S;;;;AA+MzC;AACAE,0BAAoBqE,WAApB,GAAkC,8BAAlC","file":"query_ctrl.js","sourcesContent":["/**\r\n * Grafana Datasource Plugin for PRTG API Interface (ALPHA)\r\n * Query Control Interface\r\n * 20151206 03:10 Jason Lashua\r\n * Proof of Concept. Based on publicly available plugins.\r\n *\r\n * DOES: Gets data by channel by device. Groups, Devices, Sensors and Channels available.\r\n * DOES NOT (yet): Trending, Histoic Data, Templating, Annotations\r\n */\r\n\r\nimport {QueryCtrl} from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\n\r\nexport class PRTGQueryController extends QueryCtrl {\r\n\r\n  // ZabbixQueryCtrl constructor\r\n  constructor($scope, $injector, $sce, $q, templateSrv) {\r\n\r\n  \r\n    // Call superclass constructor\r\n    super($scope, $injector);\r\n    this.init = function() {\r\n      var target = this.target;\r\n      this.templateSrv = templateSrv;\r\n      this.targetLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n      var scopeDefaults = {\r\n        metric: {},\r\n        oldTarget: _.cloneDeep(this.target)\r\n      };\r\n      _.defaults(this, scopeDefaults);\r\n\r\n      this.metric = {\r\n        groupList: [\"Loading...\"],\r\n        deviceList: [\"Loading...\"],\r\n        sensorList: [\"Loading...\"],\r\n        channelList: [\"Loading...\"]\r\n      };\r\n      \r\n      //update the picklists\r\n      this.updateGroupList();\r\n      this.updateDeviceList();\r\n      this.updateSensorList();\r\n      this.updateChannelList();\r\n      this.setChannelAlias();\r\n      this.target.errors = this.validateTarget(target);\r\n    };\r\n    this.init();\r\n  }\r\n  /**\r\n  * Take alias from channel name by default\r\n  */\r\n  setChannelAlias() {\r\n    if (!this.target.alias && this.target.channel) {\r\n      this.target.alias = this.target.channel.name;\r\n    }\r\n  }\r\n  \r\n  targetBlur() {\r\n    this.setChannelAlias();\r\n    this.target.errors = validateTarget(this.target);\r\n    if (!_.isEqual(this.oldTarget, this.target) && _.isEmpty(this.target.errors)) {\r\n      this.oldTarget = angular.copy(this.target);\r\n      this.panelCtrl.refresh();\r\n    }\r\n  }\r\n\r\n  //\r\n  // the next series of functions performs queries that first populate the list of\r\n  // groups, then populating subsequent lists once the lower item is selected\r\n  \r\n  selectGroup() {\r\n    this.updateDeviceList();\r\n    this.target.errors = this.validateTarget(this.target);\r\n    if (!_.isEqual(this.oldTarget, this.target) && _.isEmpty(this.target.errors)) {\r\n      this.oldTarget = angular.copy(this.target);\r\n      this.panelCtrl.refresh();\r\n    }\r\n  }\r\n  \r\n  selectDevice() {\r\n    this.updateSensorList();\r\n    \r\n    this.target.errors = this.validateTarget(this.target);\r\n    if (!_.isEqual(this.oldTarget, this.target) && _.isEmpty(this.target.errors)) {\r\n      this.oldTarget = angular.copy(this.target);\r\n      this.panelCtrl.refresh();\r\n    }\r\n  }\r\n  \r\n  selectSensor() {\r\n    this.updateChannelList();\r\n    this.setChannelAlias();\r\n    this.target.errors = this.validateTarget(this.target);\r\n    if (!_.isEqual(this.oldTarget, this.target) && _.isEmpty(this.target.errors)) {\r\n      this.oldTarget = angular.copy(this.target);\r\n      this.panelCtrl.refresh();\r\n    }\r\n  }\r\n  \r\n  selectChannel() {\r\n    this.target.errors = this.validateTarget(this.target);\r\n    if (!_.isEqual(this.oldTarget, this.target) && _.isEmpty(this.target.errors)) {\r\n      this.oldTarget = angular.copy(this.target);\r\n      this.panelCtrl.refresh();\r\n    }\r\n  }\r\n  \r\n  updateChannel() {\r\n    this.target.errors = this.validateTarget(this.target);\r\n    if (!_.isEqual(this.oldTarget, this.target) && _.isEmpty(this.target.errors)) {\r\n      this.target.channel.name = number(this.oldTarget.channel.name) + this.target.channelFilter;\r\n      this.oldTarget = angular.copy(this.target);\r\n      this.panelCtrl.refresh();\r\n    }\r\n  }\r\n\r\n\r\n  duplicate() {\r\n    var clone = angular.copy(this.target);\r\n    this.panel.targets.push(clone);\r\n  }\r\n\r\n  moveMetricQuery(fromIndex, toIndex) {\r\n    _.move(this.panel.targets, fromIndex, toIndex);\r\n  }\r\n\r\n  //\r\n  // this section incorporates the logic to query the API to get list items\r\n  //\r\n  \r\n  updateGroupList() {\r\n    var self = this;\r\n    self.metric.groupList = [{name: '*', visible_name: 'All'}];\r\n    this.addTemplatedVariables(self.metric.groupList);\r\n    this.datasource.prtgAPI.performGroupSuggestQuery().then(function (groups) {\r\n      _.map(groups, function(group) {\r\n        self.metric.groupList.push({name: group.group, visible_name: group.group});\r\n      });\r\n    });\r\n  }\r\n  \r\n  updateDeviceList() {\r\n    var self = this;\r\n    var groups;\r\n    self.metric.deviceList = [{name: '*', visible_name: 'All'}];\r\n    this.addTemplatedVariables(self.metric.deviceList);\r\n    if (this.target.group) {\r\n      groups = this.target.group.name || undefined;\r\n    }\r\n    if (typeof groups == \"string\") {\r\n      groups = this.templateSrv.replace(groups);\r\n    }\r\n    this.datasource.prtgAPI.performDeviceSuggestQuery(groups).then(function (devices) {\r\n      _.map(devices, function(device) {\r\n        self.metric.deviceList.push({name: device.device, visible_name: device.device});\r\n      });\r\n    });\r\n  }\r\n\r\n  updateSensorList() {\r\n    var self = this;\r\n    var device;\r\n    self.metric.sensorList = [{name: '*', visible_name: 'All'}];\r\n    this.addTemplatedVariables(self.metric.sensorList);\r\n    if (this.target.device) {\r\n      device = this.target.device.name || undefined;\r\n    }\r\n    if (typeof device == \"string\") {\r\n      device = this.templateSrv.replace(device);\r\n    }\r\n    this.datasource.prtgAPI.performSensorSuggestQuery(device).then(function (sensors) {\r\n      _.map(sensors, function(sensor) {\r\n        self.metric.sensorList.push({name: sensor.sensor, visible_name: sensor.sensor});\r\n      });\r\n    });\r\n  }\r\n\r\n  updateChannelList() {\r\n    var self = this;\r\n    var sensor, device;\r\n    self.metric.channelList = [{name: '*', visible_name: 'All'},{name: '!', visible_name: 'Last Message'}];\r\n    this.addTemplatedVariables(self.metric.channelList);\r\n    if (this.target.sensor) {\r\n      sensor = this.target.sensor.name || undefined;\r\n      if (typeof sensor == \"string\") {\r\n        sensor = this.templateSrv.replace(sensor);\r\n        device = this.templateSrv.replace(self.target.device.name);\r\n      }\r\n      this.datasource.prtgAPI.performChannelSuggestQuery(sensor, device).then(function (channels) {\r\n        _.map(channels, function(channel) {\r\n          self.metric.channelList.push({name: channel.name, visible_name: self.target.sensor.visible_name + \": \" + channel.name});\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Add templated variables to list of available metrics\r\n  *\r\n  * @param {Array} metricList List of metrics which variables add to\r\n  */\r\n  addTemplatedVariables(metricList) {\r\n    _.each(this.templateSrv.variables, function(variable) {\r\n      metricList.push({\r\n        name: '$' + variable.name,\r\n        templated: true\r\n      });\r\n    });\r\n  }\r\n\r\n  // just validate the target exists for now.\r\n  validateTarget(target) {\r\n    var errs = {};\r\n    if (!target) {\r\n      errs = 'Not defined';\r\n    }\r\n    return errs;\r\n  }\r\n}\r\n\r\n// Set templateUrl as static property\r\nPRTGQueryController.templateUrl = './partials/query.editor.html';\r\n\r\n"]}