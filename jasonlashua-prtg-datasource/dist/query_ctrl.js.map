{"version":3,"sources":["../src/query_ctrl.js"],"names":["getMetricNames","scope","metricList","_","uniq","map","metric","QueryCtrl","utils","PRTGQueryController","$scope","$injector","$rootScope","$sce","templateSrv","$on","targetChange","variableChanged","init","target","targetLetters","scopeDefaults","propertyList","name","visible_name","textValueFromList","oldTarget","cloneDeep","defaults","targetDefaults","group","device","sensor","channel","raw","uri","queryString","functions","options","mode","value","filterProperty","textValueFrom","textProperty","editorModes","updateGroupList","updateDeviceList","updateSensorList","updateChannelList","errors","validateTarget","getGroupNames","partial","getDeviceNames","getSensorNames","getChannelNames","getTextProperties","newTarget","isEqual","panelCtrl","refresh","some","item","indexOf","queryOptionsText","renderQueryOptionsText","optionsMap","forOwn","key","push","join","groupList","addTemplatedVariables","datasource","prtgAPI","performGroupSuggestQuery","then","groups","groupFilter","replace","deviceList","getHosts","devices","deviceFilter","sensorList","getSensors","sensors","sensorFilter","channelList","getAllItems","channels","each","variables","variable","templated","errs","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["/**\r\n * Grafana Datasource Plugin for PRTG API Interface\r\n * Query Control Interface\r\n * 20170715 Jason Lashua\r\n *\r\n * Updated for es6\r\n */\r\n\r\nimport {QueryCtrl} from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport * as utils from './utils';\r\nimport './css/query-editor.css!';\r\n\r\nexport class PRTGQueryController extends QueryCtrl {\r\n\r\n  constructor($scope, $injector, $rootScope, $sce, templateSrv) {\r\n    super($scope, $injector);\r\n    $scope.$on('typeahead-updated', () => {\r\n      this.targetChange();\r\n    });\r\n    \r\n    $rootScope.$on('template-variable-value-updated', () => this.variableChanged());\r\n    \r\n    this.init = function() {\r\n      const target = this.target;\r\n      this.templateSrv = templateSrv;\r\n      this.targetLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n      const scopeDefaults = {\r\n        metric:{\r\n          propertyList: [\r\n            {name: \"tags\", visible_name: \"Tags\"},\r\n            {name: \"active\", visible_name: \"Active\"},\r\n            {name: \"status\", visible_name: \"Status\"},\r\n            {name: \"status_raw\", visible_name: \"Status (raw)\"},\r\n            {name: \"message_raw\", visible_name: \"Message\"},\r\n            {name: \"priority\", visible_name: \"Priority\"}\r\n          ],\r\n          textValueFromList: [\r\n            {name: \"group\", visible_name: \"Group\"},\r\n            {name: \"device\", visible_name: \"Device\"},\r\n            {name: \"sensor\", visible_name: \"Sensor\"}\r\n          ]\r\n        },\r\n        oldTarget: _.cloneDeep(this.target)\r\n      };\r\n      _.defaults(this, scopeDefaults);\r\n      \r\n      // Load default values\r\n      const targetDefaults = {\r\n        group: { name: \"\" },\r\n        device: { name: \"\" },\r\n        sensor: { name: \"\" },\r\n        channel: { name: \"\" },\r\n        raw: { uri: \"\", queryString: \"\" },\r\n        functions: [],\r\n        options: {\r\n          mode: {\r\n            name: \"Metrics\", value: 1,\r\n            filterProperty: {},\r\n            textValueFrom: {},\r\n            textProperty: {}\r\n          }\r\n        }\r\n      };\r\n      _.defaults(target, targetDefaults);\r\n\r\n      this.editorModes = {\r\n        1: {name: \"Metrics\", value: 1},\r\n        2: {name: \"Text\", value: 2},\r\n        3: {name: \"Raw\", value: 3}\r\n      };\r\n      this.updateGroupList();\r\n      this.updateDeviceList();\r\n      this.updateSensorList();\r\n      this.updateChannelList();\r\n\r\n      this.target.errors = this.validateTarget(target);\r\n    \r\n      //the zabbix-grafana guys are way more smarter than i am, brilliant idea.      \r\n      this.getGroupNames = _.partial(getMetricNames, this, 'groupList');\r\n      this.getDeviceNames = _.partial(getMetricNames, this, 'deviceList');\r\n      this.getSensorNames = _.partial(getMetricNames, this, 'sensorList');\r\n      this.getChannelNames = _.partial(getMetricNames, this, 'channelList');\r\n      this.getTextProperties = _.partial(getMetricNames, this, 'propertyList');\r\n    };\r\n    \r\n    this.init();\r\n  }\r\n  \r\n  /**\r\n   * Set the target.options.mode property to the corresponding value and refresh.\r\n   * @param {*} mode \r\n   */\r\n  switchEditorMode(mode) {\r\n    this.target.options.mode = mode;\r\n    this.targetChange();\r\n  }\r\n \r\n  /**\r\n   * Update the target model and refresh the panel controller\r\n   */\r\n  targetChange() {\r\n    const newTarget = _.cloneDeep(this.target);\r\n    if (!_.isEqual(this.oldTarget, this.target)) {\r\n      this.oldTarget = newTarget;\r\n      this.panelCtrl.refresh();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Refresh the controller when a template variable changes.\r\n   */\r\n  variableChanged() {\r\n    _.some(['group','device','sensor'], item => {\r\n      if(this.target[item].name.indexOf('$') > 0) {\r\n        this.targetChange();\r\n      } \r\n    });\r\n  }\r\n\r\n  /*\r\n   * Select functions: when a object is selected or typed into the input,\r\n   * refresh the next list based on the data entered in the previous input.\r\n   * This is all necessary because the only way to get values from PRTG is by knowing a sensor ID\r\n   * So we basically perform a single object search, one peice at a time, then we know the sensor ID, and the channel name can be picked.\r\n   */\r\n  selectGroup() {\r\n    this.targetChange();\r\n    this.updateDeviceList();\r\n  }\r\n  \r\n  selectDevice() {\r\n    this.targetChange();\r\n    this.updateSensorList();\r\n  }\r\n  \r\n  selectSensor() {\r\n    this.targetChange();\r\n    this.updateChannelList();\r\n  }\r\n  \r\n  selectChannel() {\r\n    this.targetChange();\r\n  }\r\n  onQueryOptionChange() {\r\n    this.queryOptionsText = this.renderQueryOptionsText();\r\n    this.targetChange();\r\n  }\r\n\r\n  renderQueryOptionsText() {\r\n    const optionsMap = {};\r\n    const options = [];\r\n    _.forOwn(this.target.options, (value, key) => {\r\n      if (value) {\r\n        if (value === true) {\r\n          // Show only option name (if enabled) for boolean options\r\n          options.push(optionsMap[key]);\r\n        } else {\r\n          // Show \"option = value\" for another options\r\n          options.push(optionsMap[key] + \" = \" + value);\r\n        }\r\n      }\r\n    });\r\n    return \"Options: \" + options.join(', ');\r\n  }\r\n  \r\n  /**\r\n   * Retrieve groups and populate list\r\n   */\r\n  updateGroupList() {\r\n    this.metric.groupList = [{name: '*', visible_name: 'All'}];\r\n    this.addTemplatedVariables(this.metric.groupList);\r\n    this.datasource.prtgAPI.performGroupSuggestQuery().then(groups => {\r\n      _.map(groups, group => { \r\n        this.metric.groupList.push({name: group.group, visible_name: group.group});\r\n      });\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Retrive devices and populate list\r\n   */\r\n  updateDeviceList() {\r\n    const groupFilter = this.templateSrv.replace(this.target.group.name);\r\n    this.metric.deviceList = [{name: '*', visible_name: 'All'}];\r\n    this.addTemplatedVariables(this.metric.deviceList);\r\n    this.datasource.prtgAPI.getHosts(groupFilter, '/.*/').then(devices => {\r\n      _.map(devices, device => {\r\n        this.metric.deviceList.push({name: device.device, visible_name: device.device});\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieve sensors and populate list\r\n   */\r\n  updateSensorList() {\r\n    const groupFilter = this.templateSrv.replace(this.target.group.name);\r\n    const deviceFilter = this.templateSrv.replace(this.target.device.name);\r\n    this.metric.sensorList = [{name: '*', visible_name: 'All'}];\r\n    this.addTemplatedVariables(this.metric.sensorList);\r\n    this.datasource.prtgAPI.getSensors(groupFilter, deviceFilter, '/.*/').then(sensors => {\r\n      _.map(sensors, sensor => {\r\n        this.metric.sensorList.push({name: sensor.sensor, visible_name: sensor.sensor});\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieve channels and populate list\r\n   */\r\n  updateChannelList() {\r\n    const groupFilter = this.templateSrv.replace(this.target.group.name);\r\n    const deviceFilter = this.templateSrv.replace(this.target.device.name);\r\n    const sensorFilter = this.templateSrv.replace(this.target.sensor.name);\r\n    this.metric.channelList = [];\r\n    this.addTemplatedVariables(this.metric.channelList);\r\n    if (this.target.sensor) {\r\n      //this.datasource.prtgAPI.performChannelSuggestQuery(sensor, device).then(channels => {\r\n      this.datasource.prtgAPI.getAllItems(groupFilter, deviceFilter, sensorFilter).then(channels => {\r\n        _.map(channels, channel => {\r\n          this.metric.channelList.push({name: channel.name, visible_name: channel.name});\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Add templated variables to list of available metrics\r\n  *\r\n  * @param {Array} metricList List of metrics which variables add to\r\n  */\r\n  addTemplatedVariables(metricList) {\r\n    _.each(this.templateSrv.variables, function(variable) {\r\n      metricList.push({\r\n        name: '$' + variable.name,\r\n        templated: true\r\n      });\r\n    });\r\n  }\r\n\r\n  // just validate the target exists for now.\r\n  validateTarget(target) {\r\n    let errs = {};\r\n    if (!target) {\r\n      errs = 'Not defined';\r\n    }\r\n    return errs;\r\n  } \r\n}\r\n\r\n// Set templateUrl as static property\r\nPRTGQueryController.templateUrl = './partials/query.editor.html';\r\n\r\n// I stole this from grafana-zabbix, err, I mean, I was inspired by grafana-zabbix ;) \r\nfunction getMetricNames(scope, metricList) {  \r\n  return _.uniq(_.map(scope.metric[metricList], 'name'));\r\n}\r\n"]}