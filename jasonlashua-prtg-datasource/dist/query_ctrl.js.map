{"version":3,"sources":["../src/query_ctrl.js"],"names":["getMetricNames","scope","metricList","_","uniq","map","metric","QueryCtrl","utils","PRTGQueryController","$scope","$injector","$rootScope","$sce","templateSrv","$on","targetChange","variableChanged","init","target","targetLetters","scopeDefaults","oldTarget","cloneDeep","defaults","targetDefaults","group","name","device","sensor","channel","functions","options","updateGroupList","updateDeviceList","updateSensorList","updateChannelList","errors","validateTarget","getGroupNames","partial","getDeviceNames","getSensorNames","getChannelNames","newTarget","isEqual","panelCtrl","refresh","some","item","indexOf","queryOptionsText","renderQueryOptionsText","optionsMap","forOwn","value","key","push","join","groupList","visible_name","addTemplatedVariables","datasource","prtgAPI","performGroupSuggestQuery","then","groups","groupFilter","replace","deviceList","getHosts","devices","deviceFilter","sensorList","getSensors","sensors","sensorFilter","channelList","getAllItems","channels","each","variables","variable","templated","errs","str","isRegex","isTemplateVariable","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["/**\n * Grafana Datasource Plugin for PRTG API Interface (ALPHA)\n * Query Control Interface\n * 20170715 Jason Lashua\n *\n * Updated for es6\n */\n\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport * as utils from './utils';\nimport './css/query-editor.css!';\n\n//zabbix style function editor, create angular directives to provide flyout menu to select functions\n//import './add-metric-function.directive';\n//import './metric-function-editor.directive';\n\nexport class PRTGQueryController extends QueryCtrl {\n\n  constructor($scope, $injector, $rootScope, $sce, templateSrv) {\n    super($scope, $injector);\n    $scope.$on('typeahead-updated', () => {\n      this.targetChange();\n    });\n    \n    $rootScope.$on('template-variable-value-updated', () => this.variableChanged());\n    \n    this.init = function() {\n      var target = this.target;\n      this.templateSrv = templateSrv;\n      this.targetLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      var scopeDefaults = {\n        metric: {},\n        oldTarget: _.cloneDeep(this.target)\n      };\n      _.defaults(this, scopeDefaults);\n      \n      // Load default values\n      var targetDefaults = {\n        group: { name: \"\" },\n        device: { name: \"\" },\n        sensor: { name: \"\" },\n        channel: { name: \"\" },\n        functions: [],\n        options: {}\n      };\n      _.defaults(target, targetDefaults);\n\n      \n      this.updateGroupList();\n      this.updateDeviceList();\n      this.updateSensorList();\n      this.updateChannelList();\n\n      this.target.errors = this.validateTarget(target);\n    \n      //the zabbix-grafana guys are way more smarter than i am, brilliant idea.      \n      this.getGroupNames = _.partial(getMetricNames, this, 'groupList');\n      this.getDeviceNames = _.partial(getMetricNames, this, 'deviceList');\n      this.getSensorNames = _.partial(getMetricNames, this, 'sensorList');\n      this.getChannelNames = _.partial(getMetricNames, this, 'channelList');\n    };\n    \n    this.init();\n  }\n  \n \n  // take action on target update and refresh the model? whatever the hell angular actually does is beyond me... \n  targetChange() {\n    var newTarget = _.cloneDeep(this.target);\n    if (!_.isEqual(this.oldTarget, this.target)) {\n      this.oldTarget = newTarget;\n      this.panelCtrl.refresh();\n    }\n  }\n  \n  variableChanged() {\n    \n    _.some(['group','device','sensor'], item => {\n        if(this.target[item].name.indexOf('$') > 0) {\n            this.targetChange();\n          } \n      });\n  }\n\n  /*\n   * Select functions: when a object is selected or typed into the input,\n   * refresh the next list based on the data entered in the previous input.\n   * This is all necessary because the only way to get values from PRTG is by knowing a sensor ID\n   * So we basically perform a single object search, one peice at a time, then we know the sensor ID, and the channel name can be picked.\n   */\n  selectGroup() {\n    this.targetChange();\n    this.updateDeviceList();\n  }\n  \n  selectDevice() {\n    this.targetChange();\n    this.updateSensorList();\n  }\n  \n  selectSensor() {\n    this.targetChange();\n    this.updateChannelList();\n  }\n  \n  selectChannel() {\n    this.targetChange();\n  }\n  onQueryOptionChange() {\n    this.queryOptionsText = this.renderQueryOptionsText();\n    this.targetChange();\n  }\n\n  renderQueryOptionsText() {\n    var optionsMap = {};\n    var options = [];\n    _.forOwn(this.target.options, (value, key) => {\n      if (value) {\n        if (value === true) {\n          // Show only option name (if enabled) for boolean options\n          options.push(optionsMap[key]);\n        } else {\n          // Show \"option = value\" for another options\n          options.push(optionsMap[key] + \" = \" + value);\n        }\n      }\n    });\n    return \"Options: \" + options.join(', ');\n  }\n  \n  /*\n   * Update the content of each list\n  */   \n  updateGroupList() {\n    this.metric.groupList = [{name: '*', visible_name: 'All'}];\n    this.addTemplatedVariables(this.metric.groupList);\n    this.datasource.prtgAPI.performGroupSuggestQuery().then(groups => {\n      _.map(groups, group => { \n        this.metric.groupList.push({name: group.group, visible_name: group.group});\n      });\n    });\n  }\n  \n  updateDeviceList() {\n    var groupFilter = this.templateSrv.replace(this.target.group.name);\n   //console.log(\"groupFilter: \" + groupFilter);\n    this.metric.deviceList = [{name: '*', visible_name: 'All'}];\n    this.addTemplatedVariables(this.metric.deviceList);\n    \n    this.datasource.prtgAPI.getHosts(groupFilter, '/.*/').then(devices => {\n      _.map(devices, device => {\n        this.metric.deviceList.push({name: device.device, visible_name: device.device});\n      });\n    });\n  }\n\n  updateSensorList() {\n    var groupFilter = this.templateSrv.replace(this.target.group.name);\n    var deviceFilter = this.templateSrv.replace(this.target.device.name);\n   //console.log(\"deviceFilter: \" + deviceFilter);\n    this.metric.sensorList = [{name: '*', visible_name: 'All'}];\n    this.addTemplatedVariables(this.metric.sensorList);\n    //I know this is grossly inefficient.\n    //console.log('updateSensorList: getSensors(' + this.targetItems.group + ', ' + this.targetItems.device + ', ' + this.targetItems.sensor +')');\n   //console.log(\"updateSensorList: getSensors(\" + groupFilter + \", \" + deviceFilter + \", /.*/\");\n    this.datasource.prtgAPI.getSensors(groupFilter, deviceFilter, '/.*/').then(sensors => {\n      //console.log(\"updateSensorList: devices : \" + JSON.stringify(devices,'',4));\n      _.map(sensors, sensor => {\n        this.metric.sensorList.push({name: sensor.sensor, visible_name: sensor.sensor});\n      });\n    });\n  }\n\n  updateChannelList() {\n    var groupFilter = this.templateSrv.replace(this.target.group.name);\n    var deviceFilter = this.templateSrv.replace(this.target.device.name);\n    var sensorFilter = this.templateSrv.replace(this.target.sensor.name);\n    this.metric.channelList = [{name: 'status', visible_name: 'Last Message'},{name: 'messages', visible_name: 'Messages'}];\n    this.addTemplatedVariables(this.metric.channelList);\n    if (this.target.sensor) {\n      //this.datasource.prtgAPI.performChannelSuggestQuery(sensor, device).then(channels => {\n      this.datasource.prtgAPI.getAllItems(groupFilter, deviceFilter, sensorFilter).then(channels => {\n        _.map(channels, channel => {\n          this.metric.channelList.push({name: channel.name, visible_name: channel.name});\n        });\n      });\n    }\n  }\n\n  /**\n  * Add templated variables to list of available metrics\n  *\n  * @param {Array} metricList List of metrics which variables add to\n  */\n  addTemplatedVariables(metricList) {\n    _.each(this.templateSrv.variables, function(variable) {\n      metricList.push({\n        name: '$' + variable.name,\n        templated: true\n      });\n    });\n  }\n\n  // just validate the target exists for now.\n  validateTarget(target) {\n    var errs = {};\n    if (!target) {\n      errs = 'Not defined';\n    }\n    return errs;\n  }\n  \n  isRegex(str) {\n    return utils.isRegex(str);\n  }\n\n  isVariable(str) {\n    return utils.isTemplateVariable(str);\n  }  \n}\n\n// Set templateUrl as static property\nPRTGQueryController.templateUrl = './partials/query.editor.html';\n\n// I stole this from grafana-zabbix, err, I mean, I was inspired by grafana-zabbix ;) \nfunction getMetricNames(scope, metricList) {  \n  return _.uniq(_.map(scope.metric[metricList], 'name'));\n}\n"]}