{"version":3,"sources":["../src/query_ctrl.js"],"names":["getMetricNames","scope","metricList","_","uniq","map","metric","QueryCtrl","PRTGQueryController","$scope","$injector","$sce","$q","templateSrv","init","target","targetLetters","scopeDefaults","oldTarget","cloneDeep","defaults","updateGroupList","updateDeviceList","updateSensorList","updateChannelList","errors","validateTarget","getGroupNames","partial","getDeviceNames","getSensorNames","getChannelNames","alias","device","name","sensor","channel","newTarget","isEqual","panelCtrl","refresh","targetChange","setTargetAlias","groupList","visible_name","addTemplatedVariables","datasource","prtgAPI","performGroupSuggestQuery","then","groups","push","group","deviceList","undefined","replace","performDeviceSuggestQuery","devices","sensorList","performSensorSuggestQuery","sensors","channelList","performChannelSuggestQuery","channels","each","variables","variable","templated","errs","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyKA;AACA,WAASA,cAAT,CAAwBC,KAAxB,EAA+BC,UAA/B,EAA2C;AACzC,WAAOC,EAAEC,IAAF,CAAOD,EAAEE,GAAF,CAAMJ,MAAMK,MAAN,CAAaJ,UAAb,CAAN,EAAgC,MAAhC,CAAP,CAAP;AACD;;;AApKOK,e,kBAAAA,S;;AACDJ,O;;;;;;;;;;;;;;;;;;;;;qCAEMK,mB;;;AAEX,qCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,EAArC,EAAyCC,WAAzC,EAAsD;AAAA;;AAAA,gJAC9CJ,MAD8C,EACtCC,SADsC;;AAEpD,gBAAKI,IAAL,GAAY,YAAW;AACrB,gBAAIC,SAAS,KAAKA,MAAlB;AACA,iBAAKF,WAAL,GAAmBA,WAAnB;AACA,iBAAKG,aAAL,GAAqB,4BAArB;AACA,gBAAIC,gBAAgB;AAClBX,sBAAQ,EADU;AAElBY,yBAAWf,EAAEgB,SAAF,CAAY,KAAKJ,MAAjB;AAFO,aAApB;AAIAZ,cAAEiB,QAAF,CAAW,IAAX,EAAiBH,aAAjB;;AAEA,iBAAKI,eAAL;AACA,iBAAKC,gBAAL;AACA,iBAAKC,gBAAL;AACA,iBAAKC,iBAAL;;AAEA,iBAAKT,MAAL,CAAYU,MAAZ,GAAqB,KAAKC,cAAL,CAAoBX,MAApB,CAArB;;AAEA;AACA,iBAAKY,aAAL,GAAqBxB,EAAEyB,OAAF,CAAU5B,cAAV,EAA0B,IAA1B,EAAgC,WAAhC,CAArB;AACA,iBAAK6B,cAAL,GAAsB1B,EAAEyB,OAAF,CAAU5B,cAAV,EAA0B,IAA1B,EAAgC,YAAhC,CAAtB;AACA,iBAAK8B,cAAL,GAAsB3B,EAAEyB,OAAF,CAAU5B,cAAV,EAA0B,IAA1B,EAAgC,YAAhC,CAAtB;AACA,iBAAK+B,eAAL,GAAuB5B,EAAEyB,OAAF,CAAU5B,cAAV,EAA0B,IAA1B,EAAgC,aAAhC,CAAvB;AACD,WAtBD;AAuBA,gBAAKc,IAAL;AAzBoD;AA0BrD;;AAED;;;;;;;2CAGiB;AACf,iBAAKC,MAAL,CAAYiB,KAAZ,GAAoB,KAAKjB,MAAL,CAAYkB,MAAZ,CAAmBC,IAAnB,GAA0B,IAA1B,GAAiC,KAAKnB,MAAL,CAAYoB,MAAZ,CAAmBD,IAApD,GAA2D,GAA3D,GAAiE,KAAKnB,MAAL,CAAYqB,OAAZ,CAAoBF,IAAzG;AACD;;;yCAGc;AACb,gBAAIG,YAAYlC,EAAEgB,SAAF,CAAY,KAAKJ,MAAjB,CAAhB;AACA,gBAAI,CAACZ,EAAEmC,OAAF,CAAU,KAAKpB,SAAf,EAA0B,KAAKH,MAA/B,CAAL,EAA6C;AAC3C,mBAAKG,SAAL,GAAiBmB,SAAjB;AACA,mBAAKE,SAAL,CAAeC,OAAf;AACD;AACF;;;wCAQa;AACZ,iBAAKlB,gBAAL;AACA,iBAAKmB,YAAL;AACD;;;yCAEc;AACb,iBAAKlB,gBAAL;AACA,iBAAKkB,YAAL;AACD;;;yCAEc;AACb,iBAAKjB,iBAAL;AACA,iBAAKiB,YAAL;AACD;;;0CAEe;AACd,iBAAKC,cAAL;AACA,iBAAKD,YAAL;AACD;;;4CAKiB;AAAA;;AAChB,iBAAKnC,MAAL,CAAYqC,SAAZ,GAAwB,CAAC,EAACT,MAAM,GAAP,EAAYU,cAAc,KAA1B,EAAD,CAAxB;AACA,iBAAKC,qBAAL,CAA2B,KAAKvC,MAAL,CAAYqC,SAAvC;AACA,iBAAKG,UAAL,CAAgBC,OAAhB,CAAwBC,wBAAxB,GAAmDC,IAAnD,CAAwD,kBAAU;AAChE9C,gBAAEE,GAAF,CAAM6C,MAAN,EAAc,iBAAS;AACrB,uBAAK5C,MAAL,CAAYqC,SAAZ,CAAsBQ,IAAtB,CAA2B,EAACjB,MAAMkB,MAAMA,KAAb,EAAoBR,cAAcQ,MAAMA,KAAxC,EAA3B;AACD,eAFD;AAGD,aAJD;AAKD;;;6CAEkB;AAAA;;AACjB,gBAAIA,KAAJ;AACA,iBAAK9C,MAAL,CAAY+C,UAAZ,GAAyB,CAAC,EAACnB,MAAM,GAAP,EAAYU,cAAc,KAA1B,EAAD,CAAzB;AACA,iBAAKC,qBAAL,CAA2B,KAAKvC,MAAL,CAAY+C,UAAvC;AACA,gBAAI,KAAKtC,MAAL,CAAYqC,KAAhB,EAAuB;AACrBA,sBAAQ,KAAKrC,MAAL,CAAYqC,KAAZ,CAAkBlB,IAAlB,IAA0BoB,SAAlC;AACAF,sBAAQ,KAAKvC,WAAL,CAAiB0C,OAAjB,CAAyBH,KAAzB,CAAR;AACD;AACD,iBAAKN,UAAL,CAAgBC,OAAhB,CAAwBS,yBAAxB,CAAkDJ,KAAlD,EAAyDH,IAAzD,CAA8D,mBAAW;AACvE9C,gBAAEE,GAAF,CAAMoD,OAAN,EAAe,kBAAU;AACvB,uBAAKnD,MAAL,CAAY+C,UAAZ,CAAuBF,IAAvB,CAA4B,EAACjB,MAAMD,OAAOA,MAAd,EAAsBW,cAAcX,OAAOA,MAA3C,EAA5B;AACD,eAFD;AAGD,aAJD;AAKD;;;6CAEkB;AAAA;;AACjB,gBAAIA,MAAJ;AACA,iBAAK3B,MAAL,CAAYoD,UAAZ,GAAyB,CAAC,EAACxB,MAAM,GAAP,EAAYU,cAAc,KAA1B,EAAD,CAAzB;AACA,iBAAKC,qBAAL,CAA2B,KAAKvC,MAAL,CAAYoD,UAAvC;AACA,gBAAI,KAAK3C,MAAL,CAAYkB,MAAhB,EAAwB;AACtBA,uBAAS,KAAKlB,MAAL,CAAYkB,MAAZ,CAAmBC,IAAnB,IAA2BoB,SAApC;AACArB,uBAAS,KAAKpB,WAAL,CAAiB0C,OAAjB,CAAyBtB,MAAzB,CAAT;AACD;AACD,iBAAKa,UAAL,CAAgBC,OAAhB,CAAwBY,yBAAxB,CAAkD1B,MAAlD,EAA0DgB,IAA1D,CAA+D,mBAAW;AACxE9C,gBAAEE,GAAF,CAAMuD,OAAN,EAAe,kBAAU;AACvB,uBAAKtD,MAAL,CAAYoD,UAAZ,CAAuBP,IAAvB,CAA4B,EAACjB,MAAMC,OAAOA,MAAd,EAAsBS,cAAcT,OAAOA,MAA3C,EAA5B;AACD,eAFD;AAGD,aAJD;AAKD;;;8CAEmB;AAAA;;AAClB,gBAAIA,MAAJ,EAAYF,MAAZ;AACA,iBAAK3B,MAAL,CAAYuD,WAAZ,GAA0B,CAAC,EAAC3B,MAAM,GAAP,EAAYU,cAAc,KAA1B,EAAD,EAAkC,EAACV,MAAM,GAAP,EAAYU,cAAc,cAA1B,EAAlC,CAA1B;AACA,iBAAKC,qBAAL,CAA2B,KAAKvC,MAAL,CAAYuD,WAAvC;AACA,gBAAI,KAAK9C,MAAL,CAAYoB,MAAhB,EAAwB;AACtBA,uBAAS,KAAKpB,MAAL,CAAYoB,MAAZ,CAAmBD,IAA5B;AACAC,uBAAS,KAAKtB,WAAL,CAAiB0C,OAAjB,CAAyBpB,MAAzB,CAAT;AACAF,uBAAS,KAAKpB,WAAL,CAAiB0C,OAAjB,CAAyB,KAAKxC,MAAL,CAAYkB,MAAZ,CAAmBC,IAA5C,CAAT;AACA,mBAAKY,UAAL,CAAgBC,OAAhB,CAAwBe,0BAAxB,CAAmD3B,MAAnD,EAA2DF,MAA3D,EAAmEgB,IAAnE,CAAwE,oBAAY;AAClF9C,kBAAEE,GAAF,CAAM0D,QAAN,EAAgB,mBAAW;AACzB,yBAAKzD,MAAL,CAAYuD,WAAZ,CAAwBV,IAAxB,CAA6B,EAACjB,MAAME,QAAQF,IAAf,EAAqBU,cAAcR,QAAQF,IAA3C,EAA7B;AACD,iBAFD;AAGD,eAJD;AAKD;AACF;;;gDAOqBhC,U,EAAY;AAChCC,cAAE6D,IAAF,CAAO,KAAKnD,WAAL,CAAiBoD,SAAxB,EAAmC,UAASC,QAAT,EAAmB;AACpDhE,yBAAWiD,IAAX,CAAgB;AACdjB,sBAAM,MAAMgC,SAAShC,IADP;AAEdiC,2BAAW;AAFG,eAAhB;AAID,aALD;AAMD;;;yCAGcpD,M,EAAQ;AACrB,gBAAIqD,OAAO,EAAX;AACA,gBAAI,CAACrD,MAAL,EAAa;AACXqD,qBAAO,aAAP;AACD;AACD,mBAAOA,IAAP;AACD;;;;QAxJsC7D,S;;;;AA2JzC;AACAC,0BAAoB6D,WAApB,GAAkC,8BAAlC","file":"query_ctrl.js","sourcesContent":["/**\n * Grafana Datasource Plugin for PRTG API Interface (ALPHA)\n * Query Control Interface\n * 20170218 Jason Lashua\n *\n * Updated for es6\n */\n\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\n\nexport class PRTGQueryController extends QueryCtrl {\n\n  constructor($scope, $injector, $sce, $q, templateSrv) {\n    super($scope, $injector);\n    this.init = function() {\n      var target = this.target;\n      this.templateSrv = templateSrv;\n      this.targetLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      var scopeDefaults = {\n        metric: {},\n        oldTarget: _.cloneDeep(this.target)\n      };\n      _.defaults(this, scopeDefaults);\n      \n      this.updateGroupList();\n      this.updateDeviceList();\n      this.updateSensorList();\n      this.updateChannelList();\n\n      this.target.errors = this.validateTarget(target);\n    \n      //the zabbix-grafana guys are way more smarter than i am, brilliant idea.      \n      this.getGroupNames = _.partial(getMetricNames, this, 'groupList');\n      this.getDeviceNames = _.partial(getMetricNames, this, 'deviceList');\n      this.getSensorNames = _.partial(getMetricNames, this, 'sensorList');\n      this.getChannelNames = _.partial(getMetricNames, this, 'channelList');\n    };\n    this.init();\n  }\n  \n  /**\n  * Alias is comprised of the device name, sensor and channel, e.g., FILESERV1: DNS Response Time.\n  */\n  setTargetAlias() {\n    this.target.alias = this.target.device.name + \": \" + this.target.sensor.name + \" \" + this.target.channel.name;\n  }\n  \n  // take action on target update and refresh the model? whatever the hell angular actually does is beyond me... \n  targetChange() {\n    var newTarget = _.cloneDeep(this.target);\n    if (!_.isEqual(this.oldTarget, this.target)) {\n      this.oldTarget = newTarget;\n      this.panelCtrl.refresh();\n    }\n  }\n\n  /*\n   * Select functions: when a object is selected or typed into the input,\n   * refresh the next list based on the data entered in the previous input.\n   * This is all necessary because the only way to get values from PRTG is by knowing a sensor ID\n   * So we basically perform a single object search, one peice at a time, then we know the sensor ID, and the channel name can be picked.\n   */\n  selectGroup() {\n    this.updateDeviceList();\n    this.targetChange();\n  }\n  \n  selectDevice() {\n    this.updateSensorList();\n    this.targetChange();\n  }\n  \n  selectSensor() {\n    this.updateChannelList();\n    this.targetChange();\n  }\n  \n  selectChannel() {\n    this.setTargetAlias();\n    this.targetChange();\n  }\n  \n  /*\n   * Update the content of each list\n  */   \n  updateGroupList() {\n    this.metric.groupList = [{name: '*', visible_name: 'All'}];\n    this.addTemplatedVariables(this.metric.groupList);\n    this.datasource.prtgAPI.performGroupSuggestQuery().then(groups => {\n      _.map(groups, group => { \n        this.metric.groupList.push({name: group.group, visible_name: group.group});\n      });\n    });\n  }\n  \n  updateDeviceList() {\n    var group;\n    this.metric.deviceList = [{name: '*', visible_name: 'All'}];\n    this.addTemplatedVariables(this.metric.deviceList);\n    if (this.target.group) {\n      group = this.target.group.name || undefined;\n      group = this.templateSrv.replace(group);\n    }\n    this.datasource.prtgAPI.performDeviceSuggestQuery(group).then(devices => {\n      _.map(devices, device => {\n        this.metric.deviceList.push({name: device.device, visible_name: device.device});\n      });\n    });\n  }\n\n  updateSensorList() {\n    var device;\n    this.metric.sensorList = [{name: '*', visible_name: 'All'}];\n    this.addTemplatedVariables(this.metric.sensorList);\n    if (this.target.device) {\n      device = this.target.device.name || undefined;\n      device = this.templateSrv.replace(device);\n    }\n    this.datasource.prtgAPI.performSensorSuggestQuery(device).then(sensors => {\n      _.map(sensors, sensor => {\n        this.metric.sensorList.push({name: sensor.sensor, visible_name: sensor.sensor});\n      });\n    });\n  }\n\n  updateChannelList() {\n    var sensor, device;\n    this.metric.channelList = [{name: '*', visible_name: 'All'},{name: '!', visible_name: 'Last Message'}];\n    this.addTemplatedVariables(this.metric.channelList);\n    if (this.target.sensor) {\n      sensor = this.target.sensor.name;\n      sensor = this.templateSrv.replace(sensor);\n      device = this.templateSrv.replace(this.target.device.name);\n      this.datasource.prtgAPI.performChannelSuggestQuery(sensor, device).then(channels => {\n        _.map(channels, channel => {\n          this.metric.channelList.push({name: channel.name, visible_name: channel.name});\n        });\n      });\n    }\n  }\n\n  /**\n  * Add templated variables to list of available metrics\n  *\n  * @param {Array} metricList List of metrics which variables add to\n  */\n  addTemplatedVariables(metricList) {\n    _.each(this.templateSrv.variables, function(variable) {\n      metricList.push({\n        name: '$' + variable.name,\n        templated: true\n      });\n    });\n  }\n\n  // just validate the target exists for now.\n  validateTarget(target) {\n    var errs = {};\n    if (!target) {\n      errs = 'Not defined';\n    }\n    return errs;\n  }\n}\n\n// Set templateUrl as static property\nPRTGQueryController.templateUrl = './partials/query.editor.html';\n\n// I stole this from grafana-zabbix, err, I mean, I was inspired by grafana-zabbix ;) \nfunction getMetricNames(scope, metricList) {  \n  return _.uniq(_.map(scope.metric[metricList], 'name'));\n}\n"]}