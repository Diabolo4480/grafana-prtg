{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","utils","PRTGDataSource","instanceSettings","templateSrv","alertSrv","PRTGAPIService","name","url","username","jsonData","prtgApiUser","passhash","prtgApiPasshash","cacheTimeoutMintues","cacheTimeoutMinutes","limitmetrics","meta","prtgAPI","getVersion","then","performPRTGAPILogin","status","title","message","apiVersion","error","statusText","options","from","Math","ceil","parse","range","to","promises","map","targets","target","cloneDeep","t","hide","group","device","channel","sensor","replace","scopedVars","mode","queryMetrics","console","log","queryText","queryRaw","Promise","all","flatten","data","results","performPRTGAPIRequest","raw","uri","queryString","Array","isArray","rawData","datapoints","doc","type","textPromise","textValueFrom","getGroups","getHosts","getSensors","resolve","textFilter","filtered","filter","items","filterMatch","item","textProperty","alias","decodeText","document","createElement","innerHTML","value","Date","now","getItemsFromTarget","devices","uniq","historyPromise","getItemHistory","includeSensorName","sensor_raw","keys","length","history","hist","datetime","timeseries","getMessages","annotation","sensorId","each","messages","query","queryParts","split","queryFilter","filterExpression","JSON","stringify","alertError","params","metrics","text","metric","expandable","timeout","set"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport './PRTGAPIService';\r\nimport * as utils from './utils';\r\n\r\nclass PRTGDataSource {\r\n    \r\n    /** @ngInject */\r\n    constructor(instanceSettings, templateSrv, alertSrv, PRTGAPIService) {\r\n        /**\r\n        * PRTG Datasource\r\n        * \r\n        * @param {object} Grafana Datasource Object\r\n        */\r\n        this.templateSrv = templateSrv;\r\n        this.alertSrv = alertSrv;\r\n        \r\n        this.name =     instanceSettings.name;\r\n        this.url =      instanceSettings.url;\r\n        this.username = instanceSettings.jsonData.prtgApiUser;\r\n        this.passhash = instanceSettings.jsonData.prtgApiPasshash;\r\n        this.cacheTimeoutMintues = instanceSettings.jsonData.cacheTimeoutMinutes || 5;\r\n        this.limitmetrics = instanceSettings.meta.limitmetrics || 100;\r\n        this.prtgAPI = new PRTGAPIService(this.url, this.username, this.passhash, this.cacheTimeoutMintues);\r\n    }\r\n\r\n        /**\r\n         * Test the datasource\r\n         */\r\n        testDatasource() {\r\n            return this.prtgAPI.getVersion().then(apiVersion => {\r\n                return this.prtgAPI.performPRTGAPILogin()\r\n                    .then(() => {\r\n                        return {\r\n                            status: \"success\",\r\n                            title: \"Success\",\r\n                            message: \"PRTG API version: \" + apiVersion\r\n                        };\r\n                });\r\n            }, error => {\r\n               //console.log(JSON.stringify(error,null,4));\r\n                return {\r\n                    status: \"error\",\r\n                    title: error.status + \": \" + error.statusText,\r\n                    message: \"\"//error.config.url\r\n                };\r\n            });\r\n        }\r\n    \r\n        \r\n        /**\r\n         * Data Source Query\r\n         * returns timeseries array of values\r\n         * \r\n         * @param {object} options; Dataset Options including targets, etc.\r\n         * @return [array]\r\n         */\r\n        query(options) {\r\n            var from = Math.ceil(dateMath.parse(options.range.from) / 1000);\r\n            var to = Math.ceil(dateMath.parse(options.range.to) / 1000);\r\n            \r\n            var promises = _.map(options.targets, t => {\r\n                var target = _.cloneDeep(t);    \r\n                if (target.hide || !target.group || !target.device || !target.channel || !target.sensor) {\r\n                    return [];\r\n                }\r\n                //play nice with legacy dashboards, add options property\r\n                if (!target.options) {\r\n                    target.options = {};\r\n                }\r\n                target.group.name    = this.templateSrv.replace(target.group.name, options.scopedVars);\r\n                target.device.name   = this.templateSrv.replace(target.device.name, options.scopedVars);\r\n                target.sensor.name  = this.templateSrv.replace(target.sensor.name, options.scopedVars);\r\n                target.channel.name = this.templateSrv.replace(target.channel.name, options.scopedVars);\r\n                if (target.group.name == '*') { target.group.name = \"/.*/\";}\r\n                if (target.device.name == '*') { target.device.name = \"/.*/\";}\r\n                if (target.sensor.name == '*') { target.sensor.name = \"/.*/\";}\r\n                if (target.channel.name == '*') { target.channel.name = \"/.*/\";}\r\n                if (!target.options.mode) //legacy dashboard compat.\r\n                    {\r\n                        target.options.mode.name = \"Metrics\";\r\n                    }\r\n\r\n                if (target.options.mode.name == \"Metrics\") {\r\n                    return this.queryMetrics(target, from, to);\r\n                } else if (target.options.mode.name == \"Text\") {\r\n                    console.log(\"Query TEXT\");\r\n                    return this.queryText(target, from, to);\r\n                } else if (target.options.mode.name == \"Raw\") {\r\n                    return this.queryRaw(target, from, to);\r\n                }\r\n            });\r\n            \r\n            return Promise.all(_.flatten(promises))\r\n                .then(results => {\r\n                    return {data: _.flatten(results)};\r\n                });\r\n        }\r\n        \r\n        queryRaw(target, from, to) {\r\n            return this.prtgAPI.performPRTGAPIRequest(target.raw.uri, target.raw.queryString).then(rawData => {\r\n                if (Array.isArray(rawData)) {\r\n                    return _.map(rawData, doc => {\r\n                                return {target: 'blah', datapoints: [doc], type: 'docs'};\r\n                    \r\n                    });\r\n                } else {\r\n                    return {target: 'blah', datapoints: [rawData], type: 'docs'};\r\n                }\r\n                    \r\n            });\r\n        }\r\n        queryText(target, from, to) {\r\n            /**\r\n             * Get items isn't required\r\n             * case value from: sensor group or device\r\n             * -> perform query, then filter.\r\n             * existing getDevices getSensors getGroups can be used since they include all properties\r\n             */\r\n            var textPromise;\r\n            console.log(\"text query type: \" + target.options.textValueFrom.name);\r\n            \r\n            if (target.options.textValueFrom.name == \"group\") {\r\n                textPromise = this.prtgAPI.getGroups(target.group.name);\r\n            } else if (target.options.textValueFrom.name == \"device\") {\r\n                textPromise = this.prtgAPI.getHosts(target.group.name, target.device.name); \r\n            } else if (target.options.textValueFrom.name == \"sensor\") {\r\n                textPromise = this.prtgAPI.getSensors(target.group.name, target.device.name, target.sensor.name);\r\n            } else {\r\n                return Promise.resolve([]);\r\n            }\r\n\r\n            if (!target.options.textFilter) {\r\n                target.options.textFilter = '/.*/';\r\n            }\r\n            \r\n            return textPromise.then(items => {\r\n                var filtered = _.filter(items, item => {\r\n                    return utils.filterMatch(item[target.options.textProperty.name], target.options.textFilter);\r\n                });\r\n                return _.map(filtered, item => {\r\n                    var alias = item[target.options.textValueFrom.name];\r\n                    var decodeText = document.createElement(\"textarea\");\r\n                    decodeText.innerHTML = item[target.options.textProperty.name];\r\n                    return {target: alias, datapoints: [[decodeText.value, Date.now()]]};\r\n                });\r\n            });\r\n        }\r\n        \r\n        queryMetrics(target, from, to) {\r\n                return this.prtgAPI.getItemsFromTarget(target)\r\n                .then(items => {\r\n                    var devices = _.uniq(_.map(items, 'device'));\r\n                    var historyPromise = _.map(items, item => {\r\n                        return this.prtgAPI.getItemHistory(item.sensor, item.name, from, to)\r\n                        .then(history => {\r\n                            //console.log(\"Target history data: \" + JSON.stringify(history,'',4));\r\n                            var alias = item.name;\r\n                            if (target.options.includeSensorName) {\r\n                                alias = item.sensor_raw + \": \" + alias;\r\n                            }\r\n                            if (_.keys(devices).length > 1) {\r\n                                alias = item.device + ': ' + alias;\r\n                            }\r\n                            var datapoints = _.map(history, hist => {\r\n                                return [hist.value, hist.datetime];\r\n                            });\r\n                            var timeseries = {target:alias, datapoints: datapoints};\r\n                            return timeseries;\r\n                        });\r\n                    });\r\n                    return Promise.all(historyPromise);\r\n                });\r\n        }\r\n       annotationQuery (options) {\r\n            var from = Math.ceil(dateMath.parse(options.range.from) / 1000);\r\n            var to = Math.ceil(dateMath.parse(options.range.to) / 1000);\r\n            return this.prtgAPI.getMessages(from, to, options.annotation.sensorId)\r\n                .then(messages => {\r\n                    _.each(messages, message => {\r\n                        message.annotation = options.annotation; //inject the annotation into the object\r\n                    }, this);\r\n                return messages;\r\n            });\r\n        }\r\n\r\n        /* Find Metrics from templated letiables\r\n         *\r\n         * channel templates are limited to lookup by sensor's numeric ID.\r\n         *\r\n         * @param query Query string:\r\n         * channel:sensor=####\r\n         * sensor:device=$device or * or numeric ID\r\n         * device:group=$group or * or numeric ID\r\n         * group:* or name\r\n         */\r\n        metricFindQuery (query) {\r\n            //if (!query.match(/(channel|sensor|device|group):(\\*)|(tags|sensor|device|group)=([\\$\\sa-zA-Z0-9-_]+)/i)) {\r\n            //    return Promise.reject(\"Syntax Error: Expected pattern matching /(sensors|devices|groups):(\\*)|(tags|device|group)=([a-zA-Z0-9]+)/i\");\r\n           // }\r\n        \r\n            // sensor:device=$server\r\n            // item   type   value\r\n            \r\n            //group.host.sensor.channel\r\n            //*.$host.\r\n           //console.log(\"Metricfindquery: \" + query);\r\n            var filter = {};\r\n            var queryParts = query.split(':');\r\n            filter.type = queryParts[0];\r\n            filter.filter = queryParts[1];\r\n            if (queryParts[1] !== '*') {\r\n                var queryFilter = queryParts[1].split('=');\r\n                filter.filter = queryFilter[0];\r\n                filter.filterExpression = this.templateSrv.replace(queryFilter[1]);\r\n            }\r\n            console.log(\"metricFindQuery: filter: \" + JSON.stringify(filter));\r\n            var items;\r\n            if (filter.type == 'group') {\r\n                if (filter.filterExpression && filter.filter == 'group') {\r\n                    items = this.prtgAPI.getGroups(filter.filterExpression);\r\n                } else {\r\n                    items = this.prtgAPI.getGroups();\r\n                }\r\n            } else if (filter.type == 'device') {\r\n                if (filter.filterExpression) {\r\n                    if (filter.filter == 'group') {\r\n                        items = this.prtgAPI.getHosts(filter.filterExpression);\r\n                    } else if (filter.filter == 'device') {\r\n                        items = this.prtgAPI.getHosts('/.*/',filter.filterExpression);\r\n                    } else {\r\n                        this.alertError('Device template query is malformed.');\r\n                        return Promise.resolve([]);\r\n                    }\r\n                } else {\r\n                    items = this.prtgAPI.getHosts();\r\n                }\r\n            } else if (filter.type == 'sensor') {\r\n                if (filter.filterExpression) {\r\n                    if (filter.filter == 'group') {\r\n                        items = this.prtgAPI.getSensors(filter.filterExpression);\r\n                    } else if (filter.filter == 'device') {\r\n                        items = this.prtgAPI.getSensors('/.*/',filter.filterExpression);\r\n                    } else if (filter.filter == 'sensor') {\r\n                        items = this.prtgAPI.getSensors('/.*/','/.*/',filter.filterExpression);\r\n                    } else {\r\n                        this.alertError('Sensor template query is malformed.');\r\n                        return Promise.resolve([]);\r\n                    }\r\n                } else {\r\n                    items = this.prtgAPI.getSensors();\r\n                }\r\n            } else if (filter.type == 'channel') {\r\n                if (filter.filter == 'sensor' && typeof(filter.filterExpression) == 'number') {\r\n                    params = \"&content=channels&columns=name&id=\" + filter.filterExpression;\r\n                    items = this.prtgAPI.performPRTGAPIRequest('table.json', params);\r\n                } else {\r\n                    this.alertError('Channel template query is malformed.');\r\n                    return Promise.resolve([]);\r\n                }\r\n            }\r\n            return items.then(metrics => {\r\n                return _.map(metrics, metric => {\r\n                    return {text: metric[filter.type], expandable:0};\r\n                }, this);\r\n            });\r\n\r\n        }\r\n\r\n        alertError(message, timeout = 5000) {\r\n            this.alertSrv.set(\r\n                \"PRTG API Error\",\r\n                message,\r\n                'error',\r\n                timeout\r\n            );\r\n        } \r\n}\r\n\r\nexport { PRTGDataSource };\r\n\r\n"]}