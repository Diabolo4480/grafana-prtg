{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","PRTGDataSource","instanceSettings","templateSrv","alertSrv","PRTGAPIService","alertServ","name","url","username","jsonData","prtgApiUser","passhash","prtgApiPasshash","cacheTimeoutMintues","cacheTimeoutMinutes","limitmetrics","meta","prtgAPI","getVersion","then","performPRTGAPILogin","status","title","message","apiVersion","error","statusText","options","from","Math","ceil","parse","range","to","promises","map","targets","target","cloneDeep","t","hide","group","device","channel","sensor","replace","scopedVars","getItemsFromTarget","devices","uniq","items","promise","getItemHistory","item","alias","keys","length","timeseries","datapoints","values","Promise","all","flatten","data","results","getMessages","annotation","sensorId","each","messages","query","params","a","split","b","performPRTGAPIRequest","text","res","expandable"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport './PRTGAPIService';\n\nclass PRTGDataSource {\n    \n    /** @ngInject */\n    constructor(instanceSettings, templateSrv, alertSrv, PRTGAPIService) {\n        /**\n        * PRTG Datasource\n        * \n        * @param {object} Grafana Datasource Object\n        */\n        this.templateSrv = templateSrv;\n        this.alertServ = alertSrv;\n        \n        this.name =     instanceSettings.name;\n        this.url =      instanceSettings.url;\n        this.username = instanceSettings.jsonData.prtgApiUser;\n        this.passhash = instanceSettings.jsonData.prtgApiPasshash;\n        this.cacheTimeoutMintues = instanceSettings.jsonData.cacheTimeoutMinutes || 5;\n        this.limitmetrics = instanceSettings.meta.limitmetrics || 100;\n        this.prtgAPI = new PRTGAPIService(this.url, this.username, this.passhash, this.cacheTimeoutMintues);\n    }\n\n        /**\n         * Test the datasource\n         */\n        testDatasource() {\n            return this.prtgAPI.getVersion().then(apiVersion => {\n                return this.prtgAPI.performPRTGAPILogin()\n                    .then(() => {\n                        return {\n                            status: \"success\",\n                            title: \"Success\",\n                            message: \"PRTG API version: \" + apiVersion\n                        };\n                });\n            }, error => {\n               //console.log(JSON.stringify(error,null,4));\n                return {\n                    status: \"error\",\n                    title: error.status + \": \" + error.statusText,\n                    message: \"\"//error.config.url\n                };\n            });\n        }\n    \n        \n        /**\n         * Data Source Query\n         * returns timeseries array of values\n         * \n         * @param {object} options; Dataset Options including targets, etc.\n         * @return [array]\n         */\n        query(options) {\n            var from = Math.ceil(dateMath.parse(options.range.from) / 1000);\n            var to = Math.ceil(dateMath.parse(options.range.to) / 1000);\n            \n            var promises = _.map(options.targets, t => {\n                var target = _.cloneDeep(t);    \n                if (target.hide || !target.group || !target.device || !target.channel || !target.sensor) {\n                    return [];\n                }\n                \n               \n                target.group.name    = this.templateSrv.replace(target.group.name, options.scopedVars);\n                target.device.name   = this.templateSrv.replace(target.device.name, options.scopedVars);\n                target.sensor.name  = this.templateSrv.replace(target.sensor.name, options.scopedVars);\n                target.channel.name = this.templateSrv.replace(target.channel.name, options.scopedVars);\n                if (target.group.name == '*') { target.group.name = \"/.*/\";}\n                if (target.device.name == '*') { target.device.name = \"/.*/\";}\n                if (target.sensor.name == '*') { target.sensor.name = \"/.*/\";}\n                if (target.channel.name == '*') { target.channel.name = \"/.*/\";}\n                //oh isn't that just crappy? works for now!\n                //console.log('target: ' + JSON.stringify(target,'',4));\n                return this.prtgAPI.getItemsFromTarget(target)\n                    .then(items => {\n                       //console.log('query: items: ' + JSON.stringify(items,'',4));\n                        var devices = _.uniq(_.map(items, 'device'));\n                        //console.log('devices: ' + JSON.stringify(items,'',4));\n                         var promise = _.map(items, item => {\n                            return this.prtgAPI.getItemHistory(item.sensor, item.name, from, to).then(values => {\n                                var alias = item.name;\n                                if (_.keys(devices).length > 1) {\n                                    alias = item.device + ': ' + alias;\n                                }\n                                var timeseries = {target:alias, datapoints: values};\n                                return timeseries;\n                            });\n                        });\n                        return Promise.all(promise).then(_.flatten);\n                    });\n            });\n            \n            return Promise.all(_.flatten(promises))\n                .then(results => {\n                    return {data: _.flatten(results)};\n                });\n        }\n        \n       annotationQuery (options) {\n            var from = Math.ceil(dateMath.parse(options.range.from) / 1000);\n            var to = Math.ceil(dateMath.parse(options.range.to) / 1000);\n            return this.prtgAPI.getMessages(from, to, options.annotation.sensorId)\n                .then(messages => {\n                    _.each(messages, message => {\n                        message.annotation = options.annotation; //inject the annotation into the object\n                    }, this);\n                return messages;\n            });\n        }\n\n        /* Find Metrics from templated letiables\n         *\n         * channel templates are limited to lookup by sensor's numeric ID.\n         *\n         * @param query Query string:\n         * channel:sensor=####\n         * sensor:device=$device or * or numeric ID\n         * device:group=$group or * or numeric ID\n         * group:* or name\n         */\n        metricFindQuery (query) {\n            //if (!query.match(/(channel|sensor|device|group):(\\*)|(tags|sensor|device|group)=([\\$\\sa-zA-Z0-9-_]+)/i)) {\n            //    return Promise.reject(\"Syntax Error: Expected pattern matching /(sensors|devices|groups):(\\*)|(tags|device|group)=([a-zA-Z0-9]+)/i\");\n           // }\n        \n            // sensor:device=$server\n            // item   type   value\n            \n            //group.host.sensor.channel\n            //*.$host.\n           //console.log(\"Metricfindquery: \" + query);\n            var params = \"\";\n            var a = query.split(':');\n            var b;\n            if (a[1] !== '*') {\n                b = a[1].split('=');\n            }\n            if (a[0] == \"channel\") {\n                params = \"&content=channels&columns=name&id=\" + this.templateSrv.replace(b[1]);\n                //a[0]=\"name\";\n            } else {\n                params=\"&content=\" + a[0] + \"s&count=9999\";\n                if (a[1] !== '*') {\n                    params = params + \"&filter_\" + this.templateSrv.replace(a[1]);\n                }\n            }\n            return this.prtgAPI.performPRTGAPIRequest('table.json', params)\n                .then(results => {\n                    \n                    return _.map(results, res => {\n                        return {text: res[a[0]], expandable:0};\n                    }, this);\n            });\n            \n        }\n\n \n}\n\nexport { PRTGDataSource };\n\n"]}