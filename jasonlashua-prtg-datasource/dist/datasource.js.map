{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","utils","PRTGDataSource","instanceSettings","templateSrv","alertSrv","PRTGAPIService","name","url","username","jsonData","prtgApiUser","passhash","prtgApiPasshash","cacheTimeoutMintues","cacheTimeoutMinutes","limitmetrics","meta","prtgAPI","getVersion","then","performPRTGAPILogin","status","title","message","apiVersion","error","statusText","options","from","Math","ceil","parse","range","to","promises","map","targets","target","cloneDeep","t","hide","group","device","channel","sensor","replace","scopedVars","mode","queryMetrics","console","log","queryText","queryRaw","Promise","all","flatten","data","results","performPRTGAPIRequest","raw","uri","queryString","Array","isArray","rawData","datapoints","doc","type","textPromise","textValueFrom","getGroups","getHosts","getSensors","resolve","textFilter","filtered","filter","items","filterMatch","item","textProperty","alias","decodeText","document","createElement","innerHTML","value","Date","now","getItemsFromTarget","devices","uniq","historyPromise","getItemHistory","includeSensorName","sensor_raw","keys","length","history","hist","datetime","timeseries","getMessages","annotation","sensorId","each","messages","query","queryParts","split","queryFilter","filterExpression","alertError","params","metrics","text","metric","expandable","timeout","set"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport * as dateMath from \"app/core/utils/datemath\";\r\nimport \"./PRTGAPIService\";\r\nimport * as utils from \"./utils\";\r\n\r\nclass PRTGDataSource {\r\n  /** @ngInject */\r\n  constructor(instanceSettings, templateSrv, alertSrv, PRTGAPIService) {\r\n    /**\r\n     * PRTG Datasource\r\n     *\r\n     * @param {object} Grafana Datasource Object\r\n     */\r\n    this.templateSrv = templateSrv;\r\n    this.alertSrv = alertSrv;\r\n    this.name = instanceSettings.name;\r\n    this.url = instanceSettings.url;\r\n    this.username = instanceSettings.jsonData.prtgApiUser;\r\n    this.passhash = instanceSettings.jsonData.prtgApiPasshash;\r\n    this.cacheTimeoutMintues =\r\n      instanceSettings.jsonData.cacheTimeoutMinutes || 5;\r\n    this.limitmetrics = instanceSettings.meta.limitmetrics || 100;\r\n    this.prtgAPI = new PRTGAPIService(\r\n      this.url,\r\n      this.username,\r\n      this.passhash,\r\n      this.cacheTimeoutMintues\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Test the datasource\r\n   */\r\n  testDatasource() {\r\n    return this.prtgAPI.getVersion().then(\r\n      apiVersion => {\r\n        return this.prtgAPI.performPRTGAPILogin().then(() => {\r\n          return {\r\n            status: \"success\",\r\n            title: \"Success\",\r\n            message: \"PRTG API version: \" + apiVersion\r\n          };\r\n        });\r\n      },\r\n      error => {\r\n        return {\r\n          status: \"error\",\r\n          title: error.status + \": \" + error.statusText,\r\n          message: \"\" //error.config.url\r\n        };\r\n      }\r\n    );\r\n  }\r\n  /**\r\n   * Data Source Query\r\n   * returns timeseries array of values\r\n   * \r\n   * @param {object} options; Dataset Options including targets, etc.\r\n   * @return [array]\r\n   */\r\n  query(options) {\r\n    const from = Math.ceil(dateMath.parse(options.range.from) / 1000);\r\n    const to = Math.ceil(dateMath.parse(options.range.to) / 1000);\r\n    const promises = _.map(options.targets, t => {\r\n      const target = _.cloneDeep(t);\r\n      if (\r\n        target.hide ||\r\n        !target.group ||\r\n        !target.device ||\r\n        !target.channel ||\r\n        !target.sensor\r\n      ) {\r\n        return [];\r\n      }\r\n      //play nice with legacy dashboards, add options property\r\n      if (!target.options) {\r\n        target.options = {};\r\n      }\r\n      target.group.name = this.templateSrv.replace(\r\n        target.group.name,\r\n        options.scopedVars\r\n      );\r\n      target.device.name = this.templateSrv.replace(\r\n        target.device.name,\r\n        options.scopedVars\r\n      );\r\n      target.sensor.name = this.templateSrv.replace(\r\n        target.sensor.name,\r\n        options.scopedVars\r\n      );\r\n      target.channel.name = this.templateSrv.replace(\r\n        target.channel.name,\r\n        options.scopedVars\r\n      );\r\n      if (target.group.name == \"*\") {\r\n        target.group.name = \"/.*/\";\r\n      }\r\n      if (target.device.name == \"*\") {\r\n        target.device.name = \"/.*/\";\r\n      }\r\n      if (target.sensor.name == \"*\") {\r\n        target.sensor.name = \"/.*/\";\r\n      }\r\n      if (target.channel.name == \"*\") {\r\n        target.channel.name = \"/.*/\";\r\n      }\r\n      if (!target.options.mode) {\r\n        //legacy dashboard compat.\r\n        target.options.mode.name = \"Metrics\";\r\n      }\r\n\r\n      if (target.options.mode.name == \"Metrics\") {\r\n        return this.queryMetrics(target, from, to);\r\n      } else if (target.options.mode.name == \"Text\") {\r\n        console.log(\"Query TEXT\");\r\n        return this.queryText(target, from, to);\r\n      } else if (target.options.mode.name == \"Raw\") {\r\n        return this.queryRaw(target, from, to);\r\n      }\r\n    });\r\n    return Promise.all(_.flatten(promises)).then(results => {\r\n      return { data: _.flatten(results) };\r\n    });\r\n  }\r\n  queryRaw(target, from, to) {\r\n    return this.prtgAPI\r\n      .performPRTGAPIRequest(target.raw.uri, target.raw.queryString)\r\n      .then(rawData => {\r\n        if (Array.isArray(rawData)) {\r\n          return _.map(rawData, doc => {\r\n            return { target: \"blah\", datapoints: [doc], type: \"docs\" };\r\n          });\r\n        } else {\r\n          return { target: \"blah\", datapoints: [rawData], type: \"docs\" };\r\n        }\r\n      });\r\n  }\r\n  queryText(target, from, to) {\r\n    /**\r\n     * Get items isn't required\r\n     * case value from: sensor group or device\r\n     * -> perform query, then filter.\r\n     * existing getDevices getSensors getGroups can be used since they include all properties\r\n     */\r\n    let textPromise;\r\n    console.log(\"text query type: \" + target.options.textValueFrom.name);\r\n\r\n    if (target.options.textValueFrom.name == \"group\") {\r\n      textPromise = this.prtgAPI.getGroups(target.group.name);\r\n    } else if (target.options.textValueFrom.name == \"device\") {\r\n      textPromise = this.prtgAPI.getHosts(\r\n        target.group.name,\r\n        target.device.name\r\n      );\r\n    } else if (target.options.textValueFrom.name == \"sensor\") {\r\n      textPromise = this.prtgAPI.getSensors(\r\n        target.group.name,\r\n        target.device.name,\r\n        target.sensor.name\r\n      );\r\n    } else {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    if (!target.options.textFilter) {\r\n      target.options.textFilter = \"/.*/\";\r\n    }\r\n\r\n    return textPromise.then(items => {\r\n      const filtered = _.filter(items, item => {\r\n        return utils.filterMatch(\r\n          item[target.options.textProperty.name],\r\n          target.options.textFilter\r\n        );\r\n      });\r\n      return _.map(filtered, item => {\r\n        const alias = item[target.options.textValueFrom.name];\r\n        const decodeText = document.createElement(\"textarea\");\r\n        decodeText.innerHTML = item[target.options.textProperty.name];\r\n        return { target: alias, datapoints: [[decodeText.value, Date.now()]] };\r\n      });\r\n    });\r\n  }\r\n  queryMetrics(target, from, to) {\r\n    return this.prtgAPI.getItemsFromTarget(target).then(items => {\r\n      const devices = _.uniq(_.map(items, \"device\"));\r\n      const historyPromise = _.map(items, item => {\r\n        return this.prtgAPI\r\n          .getItemHistory(item.sensor, item.name, from, to)\r\n          .then(history => {\r\n            let alias = item.name;\r\n            if (target.options.includeSensorName) {\r\n              alias = item.sensor_raw + \": \" + alias;\r\n            }\r\n            if (_.keys(devices).length > 1) {\r\n              alias = item.device + \": \" + alias;\r\n            }\r\n            const datapoints = _.map(history, hist => {\r\n              return [hist.value, hist.datetime];\r\n            });\r\n            const timeseries = { target: alias, datapoints: datapoints };\r\n            return timeseries;\r\n          });\r\n      });\r\n      return Promise.all(historyPromise);\r\n    });\r\n  }\r\n  annotationQuery(options) {\r\n    const from = Math.ceil(dateMath.parse(options.range.from) / 1000);\r\n    const to = Math.ceil(dateMath.parse(options.range.to) / 1000);\r\n    return this.prtgAPI\r\n      .getMessages(from, to, options.annotation.sensorId)\r\n      .then(messages => {\r\n        _.each(\r\n          messages,\r\n          message => {\r\n            message.annotation = options.annotation; //inject the annotation into the object\r\n          },\r\n          this\r\n        );\r\n        return messages;\r\n      });\r\n  }\r\n\r\n  /* Find Metrics from templated letiables\r\n    *\r\n    * @param query Query string:\r\n    * channel:sensor=#### <-- must use \r\n    * sensor:device=$device or * or numeric ID\r\n    * device:group=$group or * or numeric ID\r\n    * group:* or name\r\n    */\r\n  metricFindQuery(query) {\r\n    const filter = {};\r\n    const queryParts = query.split(\":\");\r\n    filter.type = queryParts[0];\r\n    filter.filter = queryParts[1];\r\n    if (queryParts[1] !== \"*\") {\r\n      const queryFilter = queryParts[1].split(\"=\");\r\n      filter.filter = queryFilter[0];\r\n      filter.filterExpression = this.templateSrv.replace(queryFilter[1]);\r\n    }\r\n    let items;\r\n    if (filter.type == \"group\") {\r\n      if (filter.filterExpression && filter.filter == \"group\") {\r\n        items = this.prtgAPI.getGroups(filter.filterExpression);\r\n      } else {\r\n        items = this.prtgAPI.getGroups();\r\n      }\r\n    } else if (filter.type == \"device\") {\r\n      if (filter.filterExpression) {\r\n        if (filter.filter == \"group\") {\r\n          items = this.prtgAPI.getHosts(filter.filterExpression);\r\n        } else if (filter.filter == \"device\") {\r\n          items = this.prtgAPI.getHosts(\"/.*/\", filter.filterExpression);\r\n        } else {\r\n          this.alertError(\"Device template query is malformed.\");\r\n          return Promise.resolve([]);\r\n        }\r\n      } else {\r\n        items = this.prtgAPI.getHosts();\r\n      }\r\n    } else if (filter.type == \"sensor\") {\r\n      if (filter.filterExpression) {\r\n        if (filter.filter == \"group\") {\r\n          items = this.prtgAPI.getSensors(filter.filterExpression);\r\n        } else if (filter.filter == \"device\") {\r\n          items = this.prtgAPI.getSensors(\"/.*/\", filter.filterExpression);\r\n        } else if (filter.filter == \"sensor\") {\r\n          items = this.prtgAPI.getSensors(\"/.*/\", \"/.*/\", filter.filterExpression);\r\n        } else {\r\n          this.alertError(\"Sensor template query is malformed.\");\r\n          return Promise.resolve([]);\r\n        }\r\n      } else {\r\n        items = this.prtgAPI.getSensors();\r\n      }\r\n    } else if (filter.type == \"channel\") {\r\n      if (\r\n        filter.filter == \"sensor\" &&\r\n        typeof filter.filterExpression == \"number\"\r\n      ) {\r\n        const params = \"&content=channels&columns=name&id=\" + filter.filterExpression;\r\n        items = this.prtgAPI.performPRTGAPIRequest(\"table.json\", params);\r\n      } else {\r\n        this.alertError(\"Channel template query is malformed.\");\r\n        return Promise.resolve([]);\r\n      }\r\n    }\r\n    return items.then(metrics => {\r\n      return _.map(\r\n        metrics,\r\n        metric => {\r\n          return { text: metric[filter.type], expandable: 0 };\r\n        },\r\n        this\r\n      );\r\n    });\r\n  }\r\n\r\n  alertError(message, timeout = 5000) {\r\n    this.alertSrv.set(\"PRTG API Error\", message, \"error\", timeout);\r\n  }\r\n}\r\n\r\nexport { PRTGDataSource };"]}