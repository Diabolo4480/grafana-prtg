{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","PRTGDataSource","instanceSettings","$q","templateSrv","alertSrv","PRTGAPIService","name","url","username","jsonData","prtgApiUser","password","prtgApiPassword","useCache","cacheTimeoutMintues","cacheTimeoutMinutes","limitmetrics","meta","prtgAPI","q","alertServ","console","log","self","getVersion","then","apiVersion","performPRTGAPILogin","status","title","message","error","JSON","stringify","statusText","options","from","Math","ceil","parse","range","to","promises","map","targets","target","hide","group","device","channel","sensor","replace","e","d","defer","err","reject","promise","getValues","values","timeseries","visible_name","datapoints","all","flatten","results","data","getMessages","annotation","sensorId","messages","each","query","match","params","a","split","b","performPRTGAPIRequest","res","text","expandable"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport './PRTGAPIService';\r\n\r\nexport class PRTGDataSource {\r\n    \r\n    /** @ngInject */\r\n    constructor(instanceSettings, $q, templateSrv, alertSrv, PRTGAPIService) {\r\n        /**\r\n        * PRTG Datasource\r\n        * \r\n        * @param {object} Grafana Datasource Object\r\n        */\r\n        \r\n        this.name =     instanceSettings.name;\r\n        this.url =      instanceSettings.url;\r\n        this.username = instanceSettings.jsonData.prtgApiUser;\r\n        this.password = instanceSettings.jsonData.prtgApiPassword;\r\n        this.useCache = instanceSettings.jsonData.useCache || false;\r\n        this.cacheTimeoutMintues = instanceSettings.jsonData.cacheTimeoutMinutes || 5;\r\n        this.limitmetrics = instanceSettings.meta.limitmetrics || 100;\r\n        this.prtgAPI = new PRTGAPIService(this.url, this.username, this.password, this.useCache, this.cacheTimeoutMintues);\r\n        this.q = $q;\r\n        this.templateSrv = templateSrv;\r\n        this.alertServ = alertSrv;\r\n        console.log(\"hello\");\r\n    }\r\n\r\n            /**\r\n         * Test the datasource\r\n         */\r\n        testDatasource() {\r\n            var self = this;\r\n            return this.prtgAPI.getVersion().then(function (apiVersion) {\r\n                return self.prtgAPI.performPRTGAPILogin().then(function () {\r\n                    return {\r\n                        status: \"success\",\r\n                        title: \"Success\",\r\n                        message: \"PRTG API version: \" + apiVersion\r\n                        };\r\n                });\r\n            }, function(error) {\r\n                console.log(JSON.stringify(error,null,4));\r\n                return {\r\n                    status: \"error\",\r\n                    title: error.status + \": \" + error.statusText,\r\n                    message: \"\"//error.config.url\r\n                };\r\n            });\r\n        }\r\n    \r\n        \r\n        /**\r\n         * Data Source Query\r\n         * returns timeseries array of values\r\n         * \r\n         * @param {object} options; Dataset Options including targets, etc.\r\n         * @return [array]\r\n         */\r\n        query(options) {\r\n            var from = Math.ceil(dateMath.parse(options.range.from) / 1000);\r\n            var to = Math.ceil(dateMath.parse(options.range.to) / 1000);\r\n\r\n            var self = this;\r\n            var promises = _.map(options.targets, function(target) {\r\n                if (target.hide || !target.group || !target.device || !target.channel || !target.sensor) {\r\n                    return [];\r\n                }\r\n                \r\n                var device, group, sensor, channel = \"\";\r\n                //in the first release which didn't have template support, I chose numeric id's. this caused problems for templateSrv.replace.  \r\n                try {\r\n                    group = this.templateSrv.replace(target.group.name);\r\n                    device   = this.templateSrv.replace(target.device.name);\r\n                    sensor   = this.templateSrv.replace(target.sensor.name);\r\n                    channel  = this.templateSrv.replace(target.channel.name);\r\n                } catch (e) {\r\n                    var d = this.q.defer();\r\n                    var err = \"<p style=\\\"font-size: 150%; font-weight: bold;\\\">One or more target's name is not a string!</p><p>All target names should be strings. This should never happen. Your targets were:<br><b>Group:</b> \" + target.group.name + \"<br><b>Device:</b> \" + target.device.name + \"<br><b>Sensor:</b> \" + target.sensor.name + \"<br><b>Channel:</b> \" + target.channel.name + \"</p>\";\r\n                    d.reject({message: err});\r\n                    return d.promise;\r\n                }\r\n                \r\n                return self.prtgAPI.getValues(device, sensor, channel, from, to).then(function (values) {                \r\n                    var timeseries = {target:target.channel.visible_name, datapoints: values};\r\n                    return timeseries;\r\n                });\r\n                \r\n            \r\n            }, this);\r\n            \r\n            return this.q.all(_.flatten(promises)).then(function (results) {\r\n                return {data: results};\r\n            });\r\n        }\r\n        \r\n       annotationQuery (options) {\r\n            var from = Math.ceil(dateMath.parse(options.range.from) / 1000);\r\n            var to = Math.ceil(dateMath.parse(options.range.to) / 1000);\r\n            return this.prtgAPI.getMessages(from, to, options.annotation.sensorId).then(function (messages)\r\n            {\r\n                _.each(messages, function (message)\r\n                {\r\n                    message.annotation = options.annotation; //inject the annotation into the object\r\n                }, this);\r\n                return messages;\r\n            });\r\n        }\r\n\r\n        /* Find Metrics from templated variables\r\n         *\r\n         * channel templates are limited to lookup by sensor's numeric ID.\r\n         *\r\n         * @param query Query string:\r\n         * channel:sensor=####\r\n         * sensor:device=$device or * or numeric ID\r\n         * device:group=$group or * or numeric ID\r\n         * group:* or name\r\n         */\r\n        metricFindQuery (query) {\r\n            if (!query.match(/(channel|sensor|device|group):(\\*)|(tags|sensor|device|group)=([\\$\\sa-zA-Z0-9-_]+)/i)) {\r\n                var d = this.q.defer();\r\n                d.reject(\"Syntax Error: Expected pattern matching /(sensors|devices|groups):(\\*)|(tags|device|group)=([a-zA-Z0-9]+)/i\");\r\n                return d.promise;\r\n            }\r\n            var params = \"\";\r\n            var a = query.split(':');\r\n            if (a[0] == \"channel\") {\r\n                var b = a[1].split('=');\r\n                params = \"&content=channels&columns=name&id=\" + b[1];\r\n                a[0]=\"name\";\r\n            } else {\r\n                params=\"&content=\" + a[0] + \"s\";\r\n                if (a[1] !== '*') {\r\n                    params = params + \"&filter_\" + templateSrv.replace(a[1]);\r\n                }\r\n            }\r\n            return this.prtgAPI.performPRTGAPIRequest('table.json', params).then(function (results) {\r\n                return _.map(results, function(res) {\r\n                    return {text: res[a[0]], expandable:0};\r\n                }, this);\r\n            });\r\n            \r\n        }\r\n  \r\n}"]}