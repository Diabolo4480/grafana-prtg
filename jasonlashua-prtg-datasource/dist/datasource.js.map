{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","PRTGDataSource","instanceSettings","templateSrv","alertSrv","PRTGAPIService","name","url","username","jsonData","prtgApiUser","passhash","prtgApiPasshash","cacheTimeoutMintues","cacheTimeoutMinutes","limitmetrics","meta","prtgAPI","getVersion","then","performPRTGAPILogin","status","title","message","apiVersion","error","statusText","options","from","Math","ceil","parse","range","to","promises","map","targets","target","cloneDeep","t","hide","group","device","channel","sensor","replace","scopedVars","getItemsFromTarget","devices","uniq","items","historyPromise","getItemHistory","item","alias","keys","length","datapoints","history","hist","value","datetime","timeseries","Promise","all","flatten","data","results","getMessages","annotation","sensorId","each","messages","query","filter","queryParts","split","type","queryFilter","filterExpression","console","log","JSON","stringify","getGroups","getHosts","alertError","resolve","getSensors","params","performPRTGAPIRequest","metrics","text","metric","expandable","timeout","set"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport './PRTGAPIService';\n\nclass PRTGDataSource {\n    \n    /** @ngInject */\n    constructor(instanceSettings, templateSrv, alertSrv, PRTGAPIService) {\n        /**\n        * PRTG Datasource\n        * \n        * @param {object} Grafana Datasource Object\n        */\n        this.templateSrv = templateSrv;\n        this.alertSrv = alertSrv;\n        \n        this.name =     instanceSettings.name;\n        this.url =      instanceSettings.url;\n        this.username = instanceSettings.jsonData.prtgApiUser;\n        this.passhash = instanceSettings.jsonData.prtgApiPasshash;\n        this.cacheTimeoutMintues = instanceSettings.jsonData.cacheTimeoutMinutes || 5;\n        this.limitmetrics = instanceSettings.meta.limitmetrics || 100;\n        this.prtgAPI = new PRTGAPIService(this.url, this.username, this.passhash, this.cacheTimeoutMintues);\n    }\n\n        /**\n         * Test the datasource\n         */\n        testDatasource() {\n            return this.prtgAPI.getVersion().then(apiVersion => {\n                return this.prtgAPI.performPRTGAPILogin()\n                    .then(() => {\n                        return {\n                            status: \"success\",\n                            title: \"Success\",\n                            message: \"PRTG API version: \" + apiVersion\n                        };\n                });\n            }, error => {\n               //console.log(JSON.stringify(error,null,4));\n                return {\n                    status: \"error\",\n                    title: error.status + \": \" + error.statusText,\n                    message: \"\"//error.config.url\n                };\n            });\n        }\n    \n        \n        /**\n         * Data Source Query\n         * returns timeseries array of values\n         * \n         * @param {object} options; Dataset Options including targets, etc.\n         * @return [array]\n         */\n        query(options) {\n            var from = Math.ceil(dateMath.parse(options.range.from) / 1000);\n            var to = Math.ceil(dateMath.parse(options.range.to) / 1000);\n            \n            var promises = _.map(options.targets, t => {\n                var target = _.cloneDeep(t);    \n                if (target.hide || !target.group || !target.device || !target.channel || !target.sensor) {\n                    return [];\n                }\n                target.group.name    = this.templateSrv.replace(target.group.name, options.scopedVars);\n                target.device.name   = this.templateSrv.replace(target.device.name, options.scopedVars);\n                target.sensor.name  = this.templateSrv.replace(target.sensor.name, options.scopedVars);\n                target.channel.name = this.templateSrv.replace(target.channel.name, options.scopedVars);\n                if (target.group.name == '*') { target.group.name = \"/.*/\";}\n                if (target.device.name == '*') { target.device.name = \"/.*/\";}\n                if (target.sensor.name == '*') { target.sensor.name = \"/.*/\";}\n                if (target.channel.name == '*') { target.channel.name = \"/.*/\";}\n                return this.prtgAPI.getItemsFromTarget(target)\n                .then(items => {\n                   //console.log('query: items: ' + JSON.stringify(items,'',4));\n                    var devices = _.uniq(_.map(items, 'device'));\n                    //console.log('devices: ' + JSON.stringify(items,'',4));\n                    var historyPromise = _.map(items, item => {\n                        return this.prtgAPI.getItemHistory(item.sensor, item.name, from, to)\n                        .then(history => {\n                            //console.log(\"Target history data: \" + JSON.stringify(history,'',4));\n                            var alias = item.name;                              \n                            if (_.keys(devices).length > 1) {\n                                alias = item.device + ': ' + alias;\n                            }\n                            var datapoints = _.map(history, hist => {\n                                return [hist.value, hist.datetime];\n                            });\n                            var timeseries = {target:alias, datapoints: datapoints};\n                            return timeseries;\n                        });\n                    });\n                    return Promise.all(historyPromise);\n                });\n            });\n            \n            return Promise.all(_.flatten(promises))\n                .then(results => {\n                    return {data: _.flatten(results)};\n                });\n        }\n        \n       annotationQuery (options) {\n            var from = Math.ceil(dateMath.parse(options.range.from) / 1000);\n            var to = Math.ceil(dateMath.parse(options.range.to) / 1000);\n            return this.prtgAPI.getMessages(from, to, options.annotation.sensorId)\n                .then(messages => {\n                    _.each(messages, message => {\n                        message.annotation = options.annotation; //inject the annotation into the object\n                    }, this);\n                return messages;\n            });\n        }\n\n        /* Find Metrics from templated letiables\n         *\n         * channel templates are limited to lookup by sensor's numeric ID.\n         *\n         * @param query Query string:\n         * channel:sensor=####\n         * sensor:device=$device or * or numeric ID\n         * device:group=$group or * or numeric ID\n         * group:* or name\n         */\n        metricFindQuery (query) {\n            //if (!query.match(/(channel|sensor|device|group):(\\*)|(tags|sensor|device|group)=([\\$\\sa-zA-Z0-9-_]+)/i)) {\n            //    return Promise.reject(\"Syntax Error: Expected pattern matching /(sensors|devices|groups):(\\*)|(tags|device|group)=([a-zA-Z0-9]+)/i\");\n           // }\n        \n            // sensor:device=$server\n            // item   type   value\n            \n            //group.host.sensor.channel\n            //*.$host.\n           //console.log(\"Metricfindquery: \" + query);\n            var filter = {};\n            var queryParts = query.split(':');\n            filter.type = queryParts[0];\n            filter.filter = queryParts[1];\n            if (queryParts[1] !== '*') {\n                var queryFilter = queryParts[1].split('=');\n                filter.filter = queryFilter[0];\n                filter.filterExpression = this.templateSrv.replace(queryFilter[1]);\n            }\n            console.log(\"metricFindQuery: filter: \" + JSON.stringify(filter));\n            var items;\n            if (filter.type == 'group') {\n                if (filter.filterExpression && filter.filter == 'group') {\n                    items = this.prtgAPI.getGroups(filter.filterExpression);\n                } else {\n                    items = this.prtgAPI.getGroups();\n                }\n            } else if (filter.type == 'device') {\n                if (filter.filterExpression) {\n                    if (filter.filter == 'group') {\n                        items = this.prtgAPI.getHosts(filter.filterExpression);\n                    } else if (filter.filter == 'device') {\n                        items = this.prtgAPI.getHosts('/.*/',filter.filterExpression);\n                    } else {\n                        this.alertError('Device template query is malformed.');\n                        return Promise.resolve([]);\n                    }\n                } else {\n                    items = this.prtgAPI.getHosts();\n                }\n            } else if (filter.type == 'sensor') {\n                if (filter.filterExpression) {\n                    if (filter.filter == 'group') {\n                        items = this.prtgAPI.getSensors(filter.filterExpression);\n                    } else if (filter.filter == 'device') {\n                        items = this.prtgAPI.getSensors('/.*/',filter.filterExpression);\n                    } else if (filter.filter == 'sensor') {\n                        items = this.prtgAPI.getSensors('/.*/','/.*/',filter.filterExpression);\n                    } else {\n                        this.alertError('Sensor template query is malformed.');\n                        return Promise.resolve([]);\n                    }\n                } else {\n                    items = this.prtgAPI.getSensors();\n                }\n            } else if (filter.type == 'channel') {\n                if (filter.filter == 'sensor' && typeof(filter.filterExpression) == 'number') {\n                    params = \"&content=channels&columns=name&id=\" + filter.filterExpression;\n                    items = this.prtgAPI.performPRTGAPIRequest('table.json', params);\n                } else {\n                    this.alertError('Channel template query is malformed.');\n                    return Promise.resolve([]);\n                }\n            }\n            return items.then(metrics => {\n                return _.map(metrics, metric => {\n                    return {text: metric[filter.type], expandable:0};\n                }, this);\n            });\n\n        }\n\n        alertError(message, timeout = 5000) {\n            this.alertSrv.set(\n                \"PRTG API Error\",\n                message,\n                'error',\n                timeout\n            );\n        } \n}\n\nexport { PRTGDataSource };\n\n"]}