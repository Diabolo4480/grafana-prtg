{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","PRTGDataSource","instanceSettings","templateSrv","alertSrv","PRTGAPIService","alertServ","name","url","username","jsonData","prtgApiUser","passhash","prtgApiPasshash","cacheTimeoutMintues","cacheTimeoutMinutes","limitmetrics","meta","prtgAPI","getVersion","then","performPRTGAPILogin","status","title","message","apiVersion","console","log","JSON","stringify","error","statusText","options","from","Math","ceil","parse","range","to","promises","map","targets","target","hide","group","device","channel","sensor","replace","getValues","timeseries","alias","datapoints","values","Promise","all","flatten","data","results","getMessages","annotation","sensorId","each","messages","query","match","reject","params","a","split","b","performPRTGAPIRequest","text","res","expandable"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport './PRTGAPIService';\n\nclass PRTGDataSource {\n    \n    /** @ngInject */\n    constructor(instanceSettings, templateSrv, alertSrv, PRTGAPIService) {\n        /**\n        * PRTG Datasource\n        * \n        * @param {object} Grafana Datasource Object\n        */\n        this.templateSrv = templateSrv;\n        this.alertServ = alertSrv;\n        \n        this.name =     instanceSettings.name;\n        this.url =      instanceSettings.url;\n        this.username = instanceSettings.jsonData.prtgApiUser;\n        this.passhash = instanceSettings.jsonData.prtgApiPasshash;\n        this.cacheTimeoutMintues = instanceSettings.jsonData.cacheTimeoutMinutes || 5;\n        this.limitmetrics = instanceSettings.meta.limitmetrics || 100;\n        this.prtgAPI = new PRTGAPIService(this.url, this.username, this.passhash, this.cacheTimeoutMintues);\n    }\n\n        /**\n         * Test the datasource\n         */\n        testDatasource() {\n            return this.prtgAPI.getVersion().then(apiVersion => {\n                return this.prtgAPI.performPRTGAPILogin()\n                    .then(() => {\n                        return {\n                            status: \"success\",\n                            title: \"Success\",\n                            message: \"PRTG API version: \" + apiVersion\n                        };\n                });\n            }, error => {\n                console.log(JSON.stringify(error,null,4));\n                return {\n                    status: \"error\",\n                    title: error.status + \": \" + error.statusText,\n                    message: \"\"//error.config.url\n                };\n            });\n        }\n    \n        \n        /**\n         * Data Source Query\n         * returns timeseries array of values\n         * \n         * @param {object} options; Dataset Options including targets, etc.\n         * @return [array]\n         */\n        query(options) {\n            var from = Math.ceil(dateMath.parse(options.range.from) / 1000);\n            var to = Math.ceil(dateMath.parse(options.range.to) / 1000);\n            var promises = _.map(options.targets, target => {\n                if (target.hide || !target.group || !target.device || !target.channel || !target.sensor) {\n                    return [];\n                }\n                \n                var device, group, sensor, channel = \"\";\n                group = this.templateSrv.replace(target.group.name);\n                device   = this.templateSrv.replace(target.device.name);\n                sensor   = this.templateSrv.replace(target.sensor.name);\n                channel  = this.templateSrv.replace(target.channel.name);\n\n                return this.prtgAPI.getValues(device, sensor, channel, from, to)\n                    .then(values => {                \n                        var timeseries = {target:target.alias, datapoints: values};\n                        return timeseries;\n                    });\n            });\n            \n            return Promise.all(_.flatten(promises))\n                .then(results => {\n                    return {data: results};\n                });\n        }\n        \n       annotationQuery (options) {\n            var from = Math.ceil(dateMath.parse(options.range.from) / 1000);\n            var to = Math.ceil(dateMath.parse(options.range.to) / 1000);\n            return this.prtgAPI.getMessages(from, to, options.annotation.sensorId)\n                .then(messages => {\n                    _.each(messages, message => {\n                        message.annotation = options.annotation; //inject the annotation into the object\n                    }, this);\n                return messages;\n            });\n        }\n\n        /* Find Metrics from templated letiables\n         *\n         * channel templates are limited to lookup by sensor's numeric ID.\n         *\n         * @param query Query string:\n         * channel:sensor=####\n         * sensor:device=$device or * or numeric ID\n         * device:group=$group or * or numeric ID\n         * group:* or name\n         */\n        metricFindQuery (query) {\n            if (!query.match(/(channel|sensor|device|group):(\\*)|(tags|sensor|device|group)=([\\$\\sa-zA-Z0-9-_]+)/i)) {\n                return Promise.reject(\"Syntax Error: Expected pattern matching /(sensors|devices|groups):(\\*)|(tags|device|group)=([a-zA-Z0-9]+)/i\");\n            }\n            var params = \"\";\n            var a = query.split(':');\n            if (a[0] == \"channel\") {\n                var b = a[1].split('=');\n                params = \"&content=channels&columns=name&id=\" + b[1];\n                a[0]=\"name\";\n            } else {\n                params=\"&content=\" + a[0] + \"s\";\n                if (a[1] !== '*') {\n                    params = params + \"&filter_\" + templateSrv.replace(a[1]);\n                }\n            }\n            return this.prtgAPI.performPRTGAPIRequest('table.json', params)\n                .then(results => {\n                    return _.map(results, res => {\n                        return {text: res[a[0]], expandable:0};\n                    }, this);\n            });\n            \n        }\n\n \n}\n\nexport { PRTGDataSource };\n\n"]}