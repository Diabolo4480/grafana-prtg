{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","utils","PRTGDataSource","instanceSettings","templateSrv","alertSrv","PRTGAPIService","name","url","tzAutoAdjust","jsonData","username","prtgApiUser","passhash","prtgApiPasshash","cacheTimeoutMintues","cacheTimeoutMinutes","limitmetrics","meta","prtgAPI","console","log","getVersion","then","status","title","message","apiVersion","error","statusText","options","from","Math","ceil","parse","range","to","promises","map","targets","target","cloneDeep","t","hide","group","device","channel","sensor","replace","scopedVars","mode","queryMetrics","queryText","queryRaw","Promise","all","flatten","data","results","performPRTGAPIRequest","raw","uri","queryString","Array","isArray","rawData","datapoints","doc","type","textPromise","textValueFrom","getGroups","getHosts","getSensors","resolve","textFilter","filtered","filter","items","filterMatch","item","textProperty","alias","decodeText","document","createElement","innerHTML","value","Date","now","getItemsFromTarget","devices","uniq","historyPromise","getItemHistory","includeSensorName","sensor_raw","keys","length","includeDeviceName","history","hist","multiplier","isNumeric","datetime","timeseries","getMessages","annotation","sensorId","each","messages","query","queryParts","split","queryFilter","filterExpression","alertError","params","metrics","text","metric","expandable","timeout","set"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport * as dateMath from \"app/core/utils/datemath\";\r\nimport \"./PRTGAPIService\";\r\nimport * as utils from \"./utils\";\r\n\r\nclass PRTGDataSource {\r\n  /** @ngInject */\r\n  constructor(instanceSettings, templateSrv, alertSrv, PRTGAPIService) {\r\n    /**\r\n     * PRTG Datasource\r\n     *\r\n     * @param {object} Grafana Datasource Object\r\n     */\r\n    this.templateSrv = templateSrv;\r\n    this.alertSrv = alertSrv;\r\n    this.name = instanceSettings.name;\r\n    this.url = instanceSettings.url;\r\n    //this.tzShift = 0;\r\n    this.tzAutoAdjust = instanceSettings.jsonData.tzAutoAdjust;\r\n    this.username = instanceSettings.jsonData.prtgApiUser;\r\n    this.passhash = instanceSettings.jsonData.prtgApiPasshash;\r\n    this.cacheTimeoutMintues =\r\n      instanceSettings.jsonData.cacheTimeoutMinutes || 5;\r\n    this.limitmetrics = instanceSettings.meta.limitmetrics || 100;\r\n    this.prtgAPI = new PRTGAPIService(\r\n      this.url,\r\n      this.username,\r\n      this.passhash,\r\n      this.cacheTimeoutMintues,\r\n      this.tzAutoAdjust\r\n    );\r\n    console.log(\"tz setting: \" + this.tzAutoAdjust);\r\n  }\r\n\r\n  /**\r\n   * Test the datasource\r\n   */\r\n  testDatasource() {\r\n    console.log(\"tz setting: \" + this.tzAutoAdjust);\r\n    return this.prtgAPI.getVersion().then(\r\n      apiVersion => {\r\n        return {\r\n\r\n          status: \"success\",\r\n          title: \"Success\",\r\n          message: \"PRTG API version: \" + apiVersion\r\n        };\r\n      },\r\n      error => {\r\n        return {\r\n          status: \"error\",\r\n          title: error.status + \": \" + error.statusText,\r\n          message: \"\" //error.config.url\r\n        };\r\n      }\r\n    );\r\n  }\r\n  /**\r\n   * Data Source Query\r\n   * returns timeseries array of values\r\n   * \r\n   * @param {object} options; Dataset Options including targets, etc.\r\n   * @return [array]\r\n   */\r\n  query(options) {\r\n    const from = Math.ceil(dateMath.parse(options.range.from) / 1000);\r\n    const to = Math.ceil(dateMath.parse(options.range.to) / 1000);\r\n\r\n\r\n    const promises = _.map(options.targets, t => {\r\n      const target = _.cloneDeep(t);\r\n      if (\r\n        target.hide ||\r\n        !target.group ||\r\n        !target.device ||\r\n        !target.channel ||\r\n        !target.sensor\r\n      ) {\r\n        return [];\r\n      }\r\n      //play nice with legacy dashboards, add options property\r\n      if (!target.options) {\r\n        target.options = {};\r\n      }\r\n      target.group.name = this.templateSrv.replace(\r\n        target.group.name,\r\n        options.scopedVars\r\n      );\r\n      target.device.name = this.templateSrv.replace(\r\n        target.device.name,\r\n        options.scopedVars\r\n      );\r\n      target.sensor.name = this.templateSrv.replace(\r\n        target.sensor.name,\r\n        options.scopedVars\r\n      );\r\n      target.channel.name = this.templateSrv.replace(\r\n        target.channel.name,\r\n        options.scopedVars\r\n      );\r\n      if (target.group.name == \"*\") {\r\n        target.group.name = \"/.*/\";\r\n      }\r\n      if (target.device.name == \"*\") {\r\n        target.device.name = \"/.*/\";\r\n      }\r\n      if (target.sensor.name == \"*\") {\r\n        target.sensor.name = \"/.*/\";\r\n      }\r\n      if (target.channel.name == \"*\") {\r\n        target.channel.name = \"/.*/\";\r\n      }\r\n      if (!target.options.mode) {\r\n        //legacy dashboard compat.\r\n        target.options.mode = {name: \"Metrics\"};\r\n      }\r\n\r\n      if (target.options.mode.name == \"Metrics\") {\r\n        return this.queryMetrics(target, from, to);\r\n      } else if (target.options.mode.name == \"Text\") {\r\n        return this.queryText(target, from, to);\r\n      } else if (target.options.mode.name == \"Raw\") {\r\n        return this.queryRaw(target, from, to);\r\n      }\r\n    });\r\n    return Promise.all(_.flatten(promises)).then(results => {\r\n      return { data: _.flatten(results) };\r\n    });\r\n  }\r\n  queryRaw(target, from, to) {\r\n    return this.prtgAPI\r\n      .performPRTGAPIRequest(target.raw.uri, target.raw.queryString)\r\n      .then(rawData => {\r\n        if (Array.isArray(rawData)) {\r\n          return _.map(rawData, doc => {\r\n            return { target: \"blah\", datapoints: [doc], type: \"docs\" };\r\n          });\r\n        } else {\r\n          return { target: \"blah\", datapoints: [rawData], type: \"docs\" };\r\n        }\r\n      });\r\n  }\r\n  queryText(target, from, to) {\r\n    /**\r\n     * Get items isn't required\r\n     * case value from: sensor group or device\r\n     * -> perform query, then filter.\r\n     * existing getDevices getSensors getGroups can be used since they include all properties\r\n     */\r\n    let textPromise;\r\n    if (target.options.textValueFrom.name == \"group\") {\r\n      textPromise = this.prtgAPI.getGroups(target.group.name);\r\n    } else if (target.options.textValueFrom.name == \"device\") {\r\n      textPromise = this.prtgAPI.getHosts(\r\n        target.group.name,\r\n        target.device.name\r\n      );\r\n    } else if (target.options.textValueFrom.name == \"sensor\") {\r\n      textPromise = this.prtgAPI.getSensors(\r\n        target.group.name,\r\n        target.device.name,\r\n        target.sensor.name\r\n      );\r\n    } else {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    if (!target.options.textFilter) {\r\n      target.options.textFilter = \"/.*/\";\r\n    }\r\n\r\n    return textPromise.then(items => {\r\n      const filtered = _.filter(items, item => {\r\n        return utils.filterMatch(\r\n          item[target.options.textProperty.name],\r\n          target.options.textFilter\r\n        );\r\n      });\r\n      return _.map(filtered, item => {\r\n        const alias = item[target.options.textValueFrom.name];\r\n        const decodeText = document.createElement(\"textarea\");\r\n        decodeText.innerHTML = item[target.options.textProperty.name];\r\n        return { target: alias, datapoints: [[decodeText.value, Date.now()]] };\r\n      });\r\n    });\r\n  }\r\n  queryMetrics(target, from, to) {\r\n    return this.prtgAPI.getItemsFromTarget(target).then(items => {\r\n      const devices = _.uniq(_.map(items, \"device\"));\r\n      const historyPromise = _.map(items, item => {\r\n        return this.prtgAPI\r\n          .getItemHistory(item.sensor, item.name, from, to)\r\n          .then(history => {\r\n            let alias = item.name;\r\n            if (target.options.includeSensorName) {\r\n              alias = item.sensor_raw + \": \" + alias;\r\n            }\r\n            if ((_.keys(devices).length > 1) ||  (target.options.includeDeviceName)) {\r\n              alias = item.device + \": \" + alias;\r\n            }\r\n            const datapoints = _.map(history, hist => {\r\n              let value = hist.value;\r\n              if (target.options.multiplier && utils.isNumeric(target.options.multiplier)) {\r\n                value = hist.value * target.options.multiplier;\r\n              }\r\n              return [value, hist.datetime];\r\n            });\r\n            const timeseries = { target: alias, datapoints: datapoints };\r\n            return timeseries;\r\n          });\r\n      });\r\n      return Promise.all(historyPromise);\r\n    });\r\n  }\r\n  annotationQuery(options) {\r\n    const from = Math.ceil(dateMath.parse(options.range.from) / 1000);\r\n    const to = Math.ceil(dateMath.parse(options.range.to) / 1000);\r\n    return this.prtgAPI\r\n      .getMessages(from, to, options.annotation.sensorId)\r\n      .then(messages => {\r\n        _.each(\r\n          messages,\r\n          message => {\r\n            message.annotation = options.annotation; //inject the annotation into the object\r\n          },\r\n          this\r\n        );\r\n        return messages;\r\n      });\r\n  }\r\n\r\n  /* Find Metrics from templated variables\r\n    *\r\n    * @param query Query string:\r\n    * channel:sensor=#### <-- must use \r\n    * sensor:device=$device or * or numeric ID\r\n    * device:group=$group or * or numeric ID\r\n    * group:* or name\r\n    */\r\n  metricFindQuery(query) {\r\n    const filter = {};\r\n    const queryParts = query.split(\":\");\r\n    filter.type = queryParts[0];\r\n    filter.filter = queryParts[1];\r\n    if (queryParts[1] !== \"*\") {\r\n      const queryFilter = queryParts[1].split(\"=\");\r\n      filter.filter = queryFilter[0];\r\n      filter.filterExpression = this.templateSrv.replace(queryFilter[1]);\r\n    }\r\n    let items;\r\n    if (filter.type == \"group\") {\r\n      if (filter.filterExpression && filter.filter == \"group\") {\r\n        items = this.prtgAPI.getGroups(filter.filterExpression);\r\n      } else {\r\n        items = this.prtgAPI.getGroups();\r\n      }\r\n    } else if (filter.type == \"device\") {\r\n      if (filter.filterExpression) {\r\n        if (filter.filter == \"group\") {\r\n          items = this.prtgAPI.getHosts(filter.filterExpression);\r\n        } else if (filter.filter == \"device\") {\r\n          items = this.prtgAPI.getHosts(\"/.*/\", filter.filterExpression);\r\n        } else {\r\n          this.alertError(\"Device template query is malformed.\");\r\n          return Promise.resolve([]);\r\n        }\r\n      } else {\r\n        items = this.prtgAPI.getHosts();\r\n      }\r\n    } else if (filter.type == \"sensor\") {\r\n      if (filter.filterExpression) {\r\n        if (filter.filter == \"group\") {\r\n          items = this.prtgAPI.getSensors(filter.filterExpression);\r\n        } else if (filter.filter == \"device\") {\r\n          items = this.prtgAPI.getSensors(\"/.*/\", filter.filterExpression);\r\n        } else if (filter.filter == \"sensor\") {\r\n          items = this.prtgAPI.getSensors(\"/.*/\", \"/.*/\", filter.filterExpression);\r\n        } else {\r\n          this.alertError(\"Sensor template query is malformed.\");\r\n          return Promise.resolve([]);\r\n        }\r\n      } else {\r\n        items = this.prtgAPI.getSensors();\r\n      }\r\n    } else if (filter.type == \"channel\") {\r\n      if (\r\n        filter.filter == \"sensor\" &&\r\n        typeof filter.filterExpression == \"number\"\r\n      ) {\r\n        const params = \"&content=channels&columns=name&id=\" + filter.filterExpression;\r\n        items = this.prtgAPI.performPRTGAPIRequest(\"table.json\", params);\r\n      } else {\r\n        this.alertError(\"Channel template query is malformed.\");\r\n        return Promise.resolve([]);\r\n      }\r\n    }\r\n    return items.then(metrics => {\r\n      return _.map(\r\n        metrics,\r\n        metric => {\r\n          return { text: metric[filter.type], expandable: 0 };\r\n        },\r\n        this\r\n      );\r\n    });\r\n  }\r\n\r\n  alertError(message, timeout = 5000) {\r\n    this.alertSrv.set(\"PRTG API Error\", message, \"error\", timeout);\r\n  }\r\n}\r\n\r\nexport { PRTGDataSource };"]}